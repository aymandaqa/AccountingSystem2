@using System.Globalization
@model AccountingSystem.ViewModels.SalaryPaymentCreateViewModel
@{
    ViewData["Title"] = "سند صرف راتب";
}

<div class="container-fluid">
    <h2 class="mb-4">سند صرف راتب</h2>

    <div class="alert alert-info">
        <div><strong>حساب الدفع:</strong> @Model.PaymentAccountName</div>
    </div>

    <form asp-action="Create" method="post" class="row g-3">
        <input asp-for="Date" type="hidden" />
        <div class="col-12">
            <label asp-for="EmployeeId" class="form-label"></label>
            <select asp-for="EmployeeId" class="form-select" id="employeeSelect">
                <option value="">اختر الموظف</option>
                @foreach (var employee in Model.Employees)
                {
                    <option value="@employee.Id" data-balance="@employee.AccountBalance.ToString(CultureInfo.InvariantCulture)">
                        @employee.Name
                    </option>
                }
            </select>
            <span asp-validation-for="EmployeeId" class="text-danger"></span>
        </div>

        <div class="col-md-6">
            <label class="form-label">رصيد حساب الموظف</label>
            <input type="text" class="form-control" id="employeeBalance" readonly />
        </div>

        <div class="col-md-6">
            <label asp-for="Amount" class="form-label"></label>
            <input asp-for="Amount" class="form-control" type="number" min="0" step="0.01" />
            <span asp-validation-for="Amount" class="text-danger"></span>
        </div>

        <div class="col-12">
            <label asp-for="Notes" class="form-label"></label>
            <textarea asp-for="Notes" class="form-control" rows="3"></textarea>
            <span asp-validation-for="Notes" class="text-danger"></span>
        </div>

        <div class="col-12 d-flex gap-2">
            <button type="submit" class="btn btn-success">حفظ وطباعة</button>
            <a asp-action="Index" class="btn btn-secondary">إلغاء</a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const select = document.getElementById('employeeSelect');
            const balanceInput = document.getElementById('employeeBalance');
            const amountInput = document.querySelector('input[name="Amount"]');
            const form = document.querySelector('form');

            const balanceValidationMessage = 'المبلغ يتجاوز رصيد حساب الموظف المتاح.';

            function formatValue(value) {
                if (value === null || value === undefined || value === '') {
                    return '';
                }
                const number = Number(value);
                if (isNaN(number)) {
                    return value;
                }
                return number.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 2 });
            }

            function updateEmployeeInfo() {
                const option = select.options[select.selectedIndex];
                const balanceValue = option?.dataset?.balance;
                if (!option || !balanceValue) {
                    balanceInput.value = '';
                    if (amountInput) {
                        amountInput.value = '';
                        amountInput.setCustomValidity('');
                        amountInput.removeAttribute('max');
                    }
                    return;
                }

                const balance = Number(balanceValue);

                if (Number.isNaN(balance)) {
                    balanceInput.value = '';
                    if (amountInput) {
                        amountInput.setCustomValidity('');
                        amountInput.removeAttribute('max');
                    }
                    return;
                }

                balanceInput.value = formatValue(balance) + ' @Model.CurrencyCode';

                if (amountInput) {
                    if (!Number.isNaN(balance) && balance >= 0) {
                        amountInput.setAttribute('max', balance);
                    } else {
                        amountInput.removeAttribute('max');
                    }
                    validateAmount();
                }
            }

            function parseNumber(value) {
                if (value === null || value === undefined) {
                    return NaN;
                }

                if (typeof value === 'number') {
                    return value;
                }

                return Number(String(value).replace(/,/g, ''));
            }

            function validateAmount() {
                if (!amountInput) {
                    return true;
                }

                const option = select.options[select.selectedIndex];
                const balanceValue = option?.dataset?.balance;
                if (!option || !balanceValue) {
                    amountInput.setCustomValidity('');
                    return true;
                }

                const balance = parseNumber(balanceValue);
                const amount = parseNumber(amountInput.value);

                if (!Number.isNaN(balance) && !Number.isNaN(amount) && amount > balance) {
                    amountInput.setCustomValidity(balanceValidationMessage);
                    return false;
                }

                amountInput.setCustomValidity('');
                return true;
            }

            select.addEventListener('change', updateEmployeeInfo);
            if (amountInput) {
                amountInput.addEventListener('input', validateAmount);
            }
            if (form) {
                form.addEventListener('submit', function (event) {
                    if (!validateAmount()) {
                        if (amountInput) {
                            amountInput.reportValidity();
                        }
                        event.preventDefault();
                    }
                });
            }
            updateEmployeeInfo();
        });
    </script>
}
