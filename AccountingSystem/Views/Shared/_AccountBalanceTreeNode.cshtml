@model List<AccountingSystem.ViewModels.AccountTreeNodeViewModel>

@foreach (var node in Model)
{
    var hasChildren = node.HasChildren;
    var hasPreloadedChildren = node.Children.Any();
    var collapseTreeNodes = (ViewData["CollapseTreeNodes"] as bool?) ?? false;
    var showActualBalances = (ViewData["ShowActualBalances"] as bool?) ?? false;
    var shouldCollapseChildren = collapseTreeNodes && hasPreloadedChildren;
    var containerDisplay = shouldCollapseChildren
        ? "none"
        : hasPreloadedChildren ? "block" : "none";
    var toggleIcon = shouldCollapseChildren
        ? "plus"
        : hasPreloadedChildren ? "minus" : "plus";
    <div class="tree-node level-@node.Level" data-level="@node.Level" data-node-id="@node.Id" data-account-type="@(node.Id == 0 ? node.AccountType.ToString() : string.Empty)" data-has-children="@(hasChildren.ToString().ToLower())">
        <div class="tree-node-content">
            <div class="tree-node-info">
                @if (hasChildren)
                {
                    <button class="toggle-btn" type="button" data-loaded="@(hasPreloadedChildren.ToString().ToLower())">
                        <i class="fas fa-@toggleIcon"></i>
                    </button>
                }
                else
                {
                    <span style="width: 20px; display: inline-block;"></span>
                }

                @if (node.Id == 0)
                {
                    <span class="account-name">@node.NameAr</span>
                }
                else
                {
                    <span class="account-code">@node.Code</span>
                    <span class="account-name">@node.NameAr</span>
                    <span class="text-muted ms-1">(@node.CurrencyCode)</span>
                }
                @{ 
                    var selectedCurrencyCode = ViewData["SelectedCurrencyCode"] as string ?? string.Empty;
                    var baseCurrencyCode = ViewData["BaseCurrencyCode"] as string ?? string.Empty;
                    var baseActualText = string.IsNullOrWhiteSpace(baseCurrencyCode)
                        ? string.Empty
                        : $"{node.CurrentBalanceBase.ToString("N2")} {baseCurrencyCode}";
                }
                <span class="ms-auto d-flex flex-column text-end gap-1">
                    @if (showActualBalances)
                    {
                        <span class="text-success fw-bold" title="الرصيد الفعلي للحساب">
                            <i class="fas fa-wallet ms-1"></i>
                            الرصيد الفعلي:
                            <span class="text-dark">@node.CurrentBalance.ToString("N2") @node.CurrencyCode</span>
                            <small class="text-muted">
                                (@node.CurrentBalanceSelected.ToString("N2") @selectedCurrencyCode
                                @if (!string.IsNullOrEmpty(baseActualText))
                                {
                                    <text> • @baseActualText</text>
                                })
                            </small>
                        </span>
                    }
                    <span class="text-primary" title="الرصيد خلال الفترة المحددة">
                        رصيد الفترة: @node.BalanceSelected.ToString("N2") @selectedCurrencyCode
                    </span>
                </span>
            </div>

            @if (node.Id != 0 && node.CanPostTransactions)
            {
                <div class="tree-node-actions ms-2">
                    <a href="@Url.Action("AccountStatement", "Reports", new { accountId = node.Id })"
                       class="btn btn-outline-success btn-sm"
                       asp-require-permission="reports.accountstatement"
                       title="كشف الحساب">
                        <i class="fas fa-file-alt"></i>
                    </a>
                </div>
            }
        </div>

        @if (hasChildren)
        {
            <div class="tree-children" data-loaded="@(hasPreloadedChildren.ToString().ToLower())" style="display:@containerDisplay">
                @if (hasPreloadedChildren)
                {
                    @await Html.PartialAsync("_AccountBalanceTreeNode", node.Children)
                }
            </div>
        }
    </div>
}
