@using AccountingSystem.Models
@using System.Globalization
@model List<AccountingSystem.ViewModels.AccountTreeNodeViewModel>

@foreach (var node in Model)
{
    var hasChildren = node.HasChildren;
    var hasPreloadedChildren = node.Children.Any();
    var containerDisplay = hasPreloadedChildren ? "block" : "none";
    var toggleIcon = hasPreloadedChildren ? "minus" : "plus";
    var accountTypeDisplay = node.AccountType switch
    {
        AccountType.Assets => "الأصول",
        AccountType.Liabilities => "الالتزامات",
        AccountType.Equity => "حقوق الملكية",
        AccountType.Revenue => "الإيرادات",
        AccountType.Expenses => "المصروفات",
        _ => node.AccountType.ToString()
    };
    var nodeLabel = node.Id == 0 ? accountTypeDisplay : $"{node.Code} - {node.NameAr}";
    var natureDisplay = node.Nature == AccountNature.Debit ? "مدين" : "دائن";
    var postingDisplay = node.CanPostTransactions ? "قابل للترحيل" : "غير قابل للترحيل";
    var statusDisplay = node.IsActive ? "نشط" : "غير نشط";
    var openingBalanceValue = node.OpeningBalance.ToString(CultureInfo.InvariantCulture);
    var currentBalanceValue = node.CurrentBalance.ToString(CultureInfo.InvariantCulture);
    <div class="tree-node level-@node.Level" data-level="@node.Level" data-node-id="@node.Id" data-account-type="@(node.Id == 0 ? node.AccountType.ToString() : string.Empty)" data-has-children="@(hasChildren.ToString().ToLower())" data-node-name="@(node.Id == 0 ? accountTypeDisplay : node.NameAr)" data-node-code="@node.Code" data-node-label="@nodeLabel" data-type-display="@accountTypeDisplay" data-nature-display="@natureDisplay" data-posting-display="@postingDisplay" data-status-display="@statusDisplay" data-parent-name="@node.ParentAccountName" data-currency-code="@node.CurrencyCode" data-opening-balance="@openingBalanceValue" data-current-balance="@currentBalanceValue">
        <div class="tree-node-content">
            <div class="tree-node-info">
                @if (hasChildren)
                {
                    <button class="toggle-btn" type="button" data-loaded="@(hasPreloadedChildren.ToString().ToLower())">
                        <i class="fas fa-@toggleIcon"></i>
                    </button>
                }
                else
                {
                    <span style="width: 20px; display: inline-block;"></span>
                }

                @if (node.Id == 0)
                {
                    <span class="account-name">@accountTypeDisplay</span>
                }
                else
                {
                    <span class="account-code">@node.Code</span>
                    <span class="account-name">@node.NameAr</span>
                    <span class="text-muted ms-1">(@node.CurrencyCode)</span>
                    <span class="account-type badge bg-secondary">@accountTypeDisplay</span>

                    @if (node.CanPostTransactions)
                    {
                        <span class="badge bg-success">قابل للترحيل</span>
                    }
                    else
                    {
                        <span class="badge bg-warning">غير قابل للترحيل</span>
                    }

                    @if (!node.IsActive)
                    {
                        <span class="badge bg-danger">غير نشط</span>
                    }

                    @if (!string.IsNullOrWhiteSpace(node.ParentAccountName))
                    {
                        <span class="text-muted small ms-2"><i class="fas fa-level-up-alt me-1"></i>الحساب الأب: @node.ParentAccountName</span>
                    }
                }
            </div>

            @if (node.Id != 0)
            {
                <div class="tree-node-actions">
                    <div class="btn-group btn-group-sm">
                        <a href="@Url.Action("Details", new { id = node.Id })"
                           class="btn btn-outline-info" title="التفاصيل">
                            <i class="fas fa-eye"></i>
                        </a>
                        <a href="@Url.Action("Edit", new { id = node.Id })"
                           class="btn btn-outline-warning ajax-modal" title="تعديل">
                            <i class="fas fa-edit"></i>
                        </a>
                        <a href="@Url.Action("Create", new { parentId = node.Id })"
                           class="btn btn-outline-primary ajax-modal" title="إضافة حساب فرعي">
                            <i class="fas fa-plus"></i>
                        </a>
                        @if (node.CanPostTransactions)
                        {
                            <a href="@Url.Action("AccountStatement", "Reports", new { accountId = node.Id })"
                               class="btn btn-outline-success" title="كشف الحساب">
                                <i class="fas fa-file-alt"></i>
                            </a>
                        }
                        <button type="button" class="btn btn-outline-danger"
                                onclick="deleteAccount(@node.Id)" title="حذف">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }
        </div>

        @if (hasChildren)
        {
            <div class="tree-children" data-loaded="@(hasPreloadedChildren.ToString().ToLower())" style="display:@containerDisplay">
                @if (hasPreloadedChildren)
                {
                    @await Html.PartialAsync("_AccountTreeNode", node.Children)
                }
            </div>
        }
    </div>
}

