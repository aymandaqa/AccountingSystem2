@using System.Globalization
@model AccountingSystem.ViewModels.EmployeeAdvanceCreateViewModel
@{
    ViewData["Title"] = "سند صرف سلفة";
    var referenceDate = Model.Date == default(DateTime) ? DateTime.Today : Model.Date;
}

<div class="container-fluid">
    <h2 class="mb-4">سند صرف سلفة</h2>

    <div class="alert alert-info">
        <div><strong>حساب الدفع:</strong> @Model.PaymentAccountName</div>
    </div>

    <form asp-action="Create" method="post" class="row g-3">
        <input asp-for="Date" type="hidden" />
        <div class="col-12">
            <label asp-for="EmployeeId" class="form-label"></label>
            <select asp-for="EmployeeId" class="form-select" id="employeeSelect">
                <option value="">اختر الموظف</option>
                @foreach (var employee in Model.Employees)
                {
                    <option value="@employee.Id"
                            data-salary="@employee.Salary.ToString(CultureInfo.InvariantCulture)"
                            data-balance="@employee.AccountBalance.ToString(CultureInfo.InvariantCulture)"
                            data-daily-rate="@employee.DailySalaryRate.ToString(CultureInfo.InvariantCulture)"
                            data-salary-balance="@employee.AccruedSalaryBalance.ToString(CultureInfo.InvariantCulture)"
                            data-max-advance="@employee.MaxAdvanceAmount.ToString(CultureInfo.InvariantCulture)">
                        @employee.Name
                    </option>
                }
            </select>
            <span asp-validation-for="EmployeeId" class="text-danger"></span>
        </div>

        <div class="col-md-4">
            <label class="form-label">راتب الموظف</label>
            <input type="text" class="form-control" id="employeeSalary" readonly />
        </div>
        <div class="col-md-4">
            <label class="form-label">رصيد حساب الموظف</label>
            <input type="text" class="form-control" id="employeeBalance" readonly />
        </div>
        <div class="col-md-4">
            <label class="form-label">سعر اليوم للموظف</label>
            <input type="text" class="form-control" id="employeeDailyRate" readonly />
        </div>

        <div class="col-md-6">
            <label class="form-label">رصيد الراتب المتاح حتى @referenceDate.ToString("yyyy/MM/dd")</label>
            <input type="text" class="form-control" id="employeeSalaryBalance" readonly />
        </div>
        <div class="col-md-6">
            <label class="form-label">الحد الأقصى للسلفة الحالية</label>
            <input type="text" class="form-control" id="employeeMaxAdvance" readonly />
        </div>

        <div class="col-md-6">
            <label asp-for="Amount" class="form-label"></label>
            <input asp-for="Amount" class="form-control" />
            <span asp-validation-for="Amount" class="text-danger"></span>
        </div>

        <div class="col-12">
            <label asp-for="Notes" class="form-label"></label>
            <textarea asp-for="Notes" class="form-control" rows="3"></textarea>
            <span asp-validation-for="Notes" class="text-danger"></span>
        </div>

        <div class="col-12 d-flex gap-2">
            <button type="submit" class="btn btn-success">حفظ وطباعة</button>
            <a asp-action="Index" class="btn btn-secondary">إلغاء</a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const select = document.getElementById('employeeSelect');
            const salaryInput = document.getElementById('employeeSalary');
            const balanceInput = document.getElementById('employeeBalance');
            const dailyRateInput = document.getElementById('employeeDailyRate');
            const salaryBalanceInput = document.getElementById('employeeSalaryBalance');
            const maxAdvanceInput = document.getElementById('employeeMaxAdvance');

            function formatValue(value) {
                if (value === null || value === undefined || value === '') {
                    return '';
                }
                const number = Number(value);
                if (isNaN(number)) {
                    return value;
                }
                return number.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 2 });
            }

            function updateEmployeeInfo() {
                const option = select.options[select.selectedIndex];
                if (!option || !option.dataset) {
                    salaryInput.value = '';
                    balanceInput.value = '';
                    dailyRateInput.value = '';
                    salaryBalanceInput.value = '';
                    maxAdvanceInput.value = '';
                    return;
                }

                salaryInput.value = formatValue(option.dataset.salary) + ' @Model.CurrencyCode';
                balanceInput.value = formatValue(option.dataset.balance) + ' @Model.CurrencyCode';
                dailyRateInput.value = formatValue(option.dataset.dailyRate) + ' @Model.CurrencyCode';
                salaryBalanceInput.value = formatValue(option.dataset.salaryBalance) + ' @Model.CurrencyCode';
                maxAdvanceInput.value = formatValue(option.dataset.maxAdvance) + ' @Model.CurrencyCode';
            }

            select.addEventListener('change', updateEmployeeInfo);
            updateEmployeeInfo();
        });
    </script>
}
