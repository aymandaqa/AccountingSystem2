@model AccountingSystem.ViewModels.TransferCreateViewModel
@using System.Text.Json

@{
    ViewData["Title"] = "إنشاء حوالة";
    var jsonOptions = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
    var branchesJson = JsonSerializer.Serialize(Model.ReceiverBranches, jsonOptions);
    var accountsJson = JsonSerializer.Serialize(Model.ReceiverAccounts, jsonOptions);
    var currencyUnitsJson = JsonSerializer.Serialize(Model.CurrencyUnits, jsonOptions);
    var currencyUnitCountsJson = JsonSerializer.Serialize(Model.CurrencyUnitCounts, jsonOptions);
}

<h2>إنشاء حوالة</h2>

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="All" class="text-danger"></div>

    <div class="form-group">
        <label asp-for="FromPaymentAccountId"></label>
        <select asp-for="FromPaymentAccountId" class="form-control" id="senderAccountSelect">
            <option value="">اختر حساب الإرسال</option>
            @foreach (var account in Model.SenderAccounts)
            {
                <option value="@account.AccountId"
                        data-currency-id="@account.CurrencyId"
                        data-currency-code="@account.CurrencyCode"
                        selected="@(Model.FromPaymentAccountId == account.AccountId)">
                    @account.DisplayName
                </option>
            }
        </select>
        <span asp-validation-for="FromPaymentAccountId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="ReceiverId"></label>
        <select asp-for="ReceiverId" class="form-control" id="receiverSelect">
            <option value="">اختر المستلم</option>
            @foreach (var receiver in Model.Receivers)
            {
                <option value="@receiver.Value" selected="@receiver.Selected">@receiver.Text</option>
            }
        </select>
        <span asp-validation-for="ReceiverId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label>فرع الإرسال</label>
        <input type="text" class="form-control" value="@Model.SenderBranch" disabled />
    </div>
    <div class="form-group">
        <label>فرع الاستقبال</label>
        <input type="text" id="receiverBranch" class="form-control" disabled />
    </div>
    <div class="form-group">
        <label>حساب المستلم</label>
        <input type="text" id="receiverAccountDisplay" class="form-control" disabled />
    </div>

    <div class="form-group d-none" id="currencyUnitsSection">
        <label class="d-block">تفاصيل الفئات <span id="currencyUnitsCurrencyCode" class="text-muted"></span></label>
        <div id="currencyUnitsInputs" class="row g-2"></div>
        <div id="currencyUnitsEmptyMessage" class="text-muted small d-none">لا توجد فئات معرفة لهذه العملة.</div>
    </div>

    <div class="form-group">
        <label asp-for="Amount"></label>
        <input asp-for="Amount" class="form-control" />
        <span asp-validation-for="Amount" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Notes"></label>
        <textarea asp-for="Notes" class="form-control"></textarea>
        <span asp-validation-for="Notes" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">إرسال</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const branches = @Html.Raw(branchesJson);
        const receiverAccounts = @Html.Raw(accountsJson);
        const currencyUnits = @Html.Raw(currencyUnitsJson);
        let initialUnitCounts = @Html.Raw(currencyUnitCountsJson);
        const branchInput = document.getElementById('receiverBranch');
        const accountDisplay = document.getElementById('receiverAccountDisplay');
        const receiverSelect = document.getElementById('receiverSelect');
        const senderAccountSelect = document.getElementById('senderAccountSelect');
        const amountInput = document.getElementById('Amount');
        const currencyUnitsSection = document.getElementById('currencyUnitsSection');
        const currencyUnitsInputs = document.getElementById('currencyUnitsInputs');
        const currencyUnitsEmptyMessage = document.getElementById('currencyUnitsEmptyMessage');
        const currencyUnitsCurrencyCode = document.getElementById('currencyUnitsCurrencyCode');

        function updateReceiverInfo() {
            const receiverId = receiverSelect.value;
            branchInput.value = branches[receiverId] || '';

            const selectedOption = senderAccountSelect.options[senderAccountSelect.selectedIndex];
            const currencyIdValue = selectedOption ? Number(selectedOption.dataset.currencyId) : null;
            const hasCurrency = Number.isFinite(currencyIdValue);
            const accounts = receiverAccounts[receiverId] || [];
            const matchingAccount = hasCurrency ? accounts.find(a => a.currencyId === currencyIdValue) : null;

            if (matchingAccount) {
                accountDisplay.value = matchingAccount.displayName;
            } else if (receiverId && hasCurrency) {
                accountDisplay.value = 'لا يوجد حساب متاح بنفس العملة';
            } else {
                accountDisplay.value = '';
            }
        }

        function updateAmountFromUnits() {
            const unitInputs = currencyUnitsInputs.querySelectorAll('.currency-unit-input');
            if (unitInputs.length === 0) {
                amountInput.readOnly = false;
                return;
            }

            let total = 0;
            unitInputs.forEach(input => {
                const count = Number(input.value);
                const unitValue = Number(input.dataset.value);
                if (!Number.isNaN(count) && !Number.isNaN(unitValue)) {
                    total += count * unitValue;
                }
            });

            amountInput.value = total.toFixed(2);
            amountInput.readOnly = true;
        }

        function renderCurrencyUnits(currencyId) {
            currencyUnitsInputs.innerHTML = '';

            const units = currencyUnits[currencyId] || [];

            if (!units.length) {
                currencyUnitsSection.classList.remove('d-none');
                currencyUnitsEmptyMessage.classList.remove('d-none');
                amountInput.readOnly = false;
                amountInput.value = '';
                initialUnitCounts = [];
                return;
            }

            const countMap = new Map((initialUnitCounts || []).map(c => [c.currencyUnitId, c.count]));
            currencyUnitsEmptyMessage.classList.add('d-none');
            currencyUnitsSection.classList.remove('d-none');
            amountInput.readOnly = true;

            let index = 0;
            units.forEach(unit => {
                const wrapper = document.createElement('div');
                wrapper.className = 'col-md-4';

                const inputGroup = document.createElement('div');
                inputGroup.className = 'input-group';

                const span = document.createElement('span');
                span.className = 'input-group-text';
                span.textContent = unit.name;

                const input = document.createElement('input');
                input.type = 'number';
                input.min = '0';
                input.step = '1';
                input.className = 'form-control currency-unit-input';
                input.placeholder = 'عدد الوحدات';
                input.dataset.value = unit.valueInBaseUnit;
                input.name = `CurrencyUnitCounts[${index}].Count`;
                const hiddenIdInput = document.createElement('input');
                hiddenIdInput.type = 'hidden';
                hiddenIdInput.name = `CurrencyUnitCounts[${index}].CurrencyUnitId`;
                hiddenIdInput.value = unit.currencyUnitId;
                const existingCount = countMap.has(unit.currencyUnitId) ? countMap.get(unit.currencyUnitId) : '';
                input.value = existingCount !== '' ? existingCount : 0;
                input.addEventListener('input', updateAmountFromUnits);

                inputGroup.appendChild(span);
                inputGroup.appendChild(hiddenIdInput);
                inputGroup.appendChild(input);
                wrapper.appendChild(inputGroup);
                currencyUnitsInputs.appendChild(wrapper);
                index += 1;
            });

            initialUnitCounts = [];
            updateAmountFromUnits();
        }

        function handleSenderAccountChange() {
            updateReceiverInfo();
            const selectedOption = senderAccountSelect.options[senderAccountSelect.selectedIndex];
            if (currencyUnitsCurrencyCode) {
                const code = selectedOption && selectedOption.dataset.currencyCode ? selectedOption.dataset.currencyCode : '';
                currencyUnitsCurrencyCode.textContent = code ? `(${code})` : '';
            }
            const currencyIdValue = selectedOption ? Number(selectedOption.dataset.currencyId) : null;
            if (Number.isFinite(currencyIdValue)) {
                renderCurrencyUnits(currencyIdValue);
            } else {
                currencyUnitsSection.classList.add('d-none');
                currencyUnitsInputs.innerHTML = '';
                currencyUnitsEmptyMessage.classList.add('d-none');
                amountInput.readOnly = false;
                initialUnitCounts = [];
                if (currencyUnitsCurrencyCode) {
                    currencyUnitsCurrencyCode.textContent = '';
                }
            }
        }

        receiverSelect.addEventListener('change', updateReceiverInfo);
        senderAccountSelect.addEventListener('change', handleSenderAccountChange);
        handleSenderAccountChange();
    </script>
}
