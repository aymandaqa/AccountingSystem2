@model AccountingSystem.ViewModels.HomeDashboardViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "Home Page";
    var jsonOptions = new JsonSerializerOptions
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        WriteIndented = false
    };
}

<div class="container py-4">
    <h1 class="mb-4 text-center">لوحة مؤشرات النظام</h1>
    <p class="text-muted text-center mb-4">استعرض أداء النظام باستخدام بيانات فعلية ضمن الفترة المحددة، مع إمكانية إخفاء أي رسم بياني مع تذكر حالته تلقائياً.</p>

    <form method="get" class="row g-3 justify-content-center mb-4 align-items-end">
        <div class="col-md-3">
            <label for="fromDate" class="form-label">من تاريخ</label>
            <input type="date" class="form-control" id="fromDate" name="fromDate" value="@Model.FromDate.ToString("yyyy-MM-dd")" />
        </div>
        <div class="col-md-3">
            <label for="toDate" class="form-label">إلى تاريخ</label>
            <input type="date" class="form-control" id="toDate" name="toDate" value="@Model.ToDate.ToString("yyyy-MM-dd")" />
        </div>
        <div class="col-md-2 d-grid">
            <button type="submit" class="btn btn-primary">تحديث البيانات</button>
        </div>
    </form>

    <div class="alert alert-info text-center mb-4" role="status">
        البيانات المعروضة للفترة من
        <strong>@Model.FromDate.ToString("yyyy/MM/dd")</strong>
        إلى
        <strong>@Model.ToDate.ToString("yyyy/MM/dd")</strong>
    </div>

    <div class="row g-4">
        <div class="col-6">
            <div class="card chart-card" data-collapse-id="line-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">اتجاه الإيرادات </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-line-chart" aria-expanded="true" aria-controls="collapse-line-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-line-chart" class="collapse show">
                    <div id="lineChart" class="chart-host"></div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card chart-card" data-collapse-id="column-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">مقارنة الأرباح السنوية   </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-column-chart" aria-expanded="true" aria-controls="collapse-column-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-column-chart" class="collapse show">
                    <div id="columnChart" class="chart-host"></div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card chart-card" data-collapse-id="spline-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">الاتجاه التراكمي للنفقات </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-spline-chart" aria-expanded="true" aria-controls="collapse-spline-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-spline-chart" class="collapse show">
                    <div id="splineChart" class="chart-host"></div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card chart-card" data-collapse-id="area-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">توزيع التدفقات النقدية  </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-area-chart" aria-expanded="true" aria-controls="collapse-area-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-area-chart" class="collapse show">
                    <div id="areaChart" class="chart-host"></div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card chart-card" data-collapse-id="bar-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">أداء الأقسام  </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-bar-chart" aria-expanded="true" aria-controls="collapse-bar-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-bar-chart" class="collapse show">
                    <div id="barChart" class="chart-host"></div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card chart-card" data-collapse-id="pie-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">الحصة السوقية </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-pie-chart" aria-expanded="true" aria-controls="collapse-pie-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-pie-chart" class="collapse show">
                    <div id="pieChart" class="chart-host"></div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card chart-card" data-collapse-id="doughnut-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">مصادر الدخل </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-doughnut-chart" aria-expanded="true" aria-controls="collapse-doughnut-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-doughnut-chart" class="collapse show">
                    <div id="doughnutChart" class="chart-host"></div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card chart-card" data-collapse-id="scatter-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">تحليل سندات القبض  </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-scatter-chart" aria-expanded="true" aria-controls="collapse-scatter-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-scatter-chart" class="collapse show">
                    <div id="scatterChart" class="chart-host"></div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card chart-card" data-collapse-id="bubble-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">تحليل المخاطر مقابل العائد  </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-bubble-chart" aria-expanded="true" aria-controls="collapse-bubble-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-bubble-chart" class="collapse show">
                    <div id="bubbleChart" class="chart-host"></div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card chart-card" data-collapse-id="radar-chart">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">تقييم الأداء الشامل </h5>
                    <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-radar-chart" aria-expanded="true" aria-controls="collapse-radar-chart">إظهار / إخفاء</button>
                </div>
                <div id="collapse-radar-chart" class="collapse show">
                    <div id="radarChart" class="chart-host"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .chart-host {
            height: 360px;
        }

        .chart-card {
            border: 1px solid #dee2e6;
            box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.05);
        }

            .chart-card .card-header {
                background-color: #0d6efd;
                color: #fff;
            }

            .chart-card .btn {
                color: #0d6efd;
                background-color: #fff;
                border-color: #fff;
            }

                .chart-card .btn:hover {
                    color: #fff;
                    background-color: rgba(255, 255, 255, 0.2);
                    border-color: rgba(255, 255, 255, 0.2);
                }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var collapsePrefix = 'chart-collapse-state:';

            document.querySelectorAll('.chart-card').forEach(function (card) {
                var collapseId = card.getAttribute('data-collapse-id');
                var collapseElement = card.querySelector('.collapse');
                var storageKey = collapsePrefix + collapseId;
                var storedState = localStorage.getItem(storageKey);
                var collapseInstance = bootstrap.Collapse.getOrCreateInstance(collapseElement, { toggle: false });

                if (storedState === 'hidden') {
                    collapseInstance.hide();
                } else {
                    collapseInstance.show();
                }

                collapseElement.addEventListener('shown.bs.collapse', function () {
                    localStorage.setItem(storageKey, 'shown');
                });

                collapseElement.addEventListener('hidden.bs.collapse', function () {
                    localStorage.setItem(storageKey, 'hidden');
                });
            });

            if (ej?.base) {
                ej.base.enableRtl(true);
                try {
                    ej.base.setCulture('ar');
                } catch (error) {
                    console.warn('تعذر ضبط اللغة على العربية للتشارت', error);
                }

                ej.base.L10n.load({
                    ar: {
                        chart: {
                            ZoomIn: 'تكبير',
                            ZoomOut: 'تصغير',
                            Zoom: 'تكبير',
                            Pan: 'تحريك',
                            Reset: 'إعادة تعيين',
                            ResetZoom: 'إعادة ضبط التكبير'
                        },
                        accumulationchart: {
                            Series: 'سلسلة'
                        }
                    }
                });
            }

            const monthlyFinancialsRaw = @Html.Raw(JsonSerializer.Serialize(Model.MonthlyFinancials, jsonOptions));
            const departmentPerformance = @Html.Raw(JsonSerializer.Serialize(Model.DepartmentPerformance, jsonOptions));
            const marketShare = @Html.Raw(JsonSerializer.Serialize(Model.MarketShare, jsonOptions));
            const incomeSources = @Html.Raw(JsonSerializer.Serialize(Model.IncomeSources, jsonOptions));
            const salesScatterRaw = @Html.Raw(JsonSerializer.Serialize(Model.SalesScatter, jsonOptions));
            const riskReturn = @Html.Raw(JsonSerializer.Serialize(Model.RiskReturn, jsonOptions));
            const balancedScorecard = @Html.Raw(JsonSerializer.Serialize(Model.BalancedScorecard, jsonOptions));

            const numberFormatter = new Intl.NumberFormat('ar-EG', { maximumFractionDigits: 2 });
            const axisDateFormatter = new Intl.DateTimeFormat('ar-EG', { year: 'numeric', month: 'short' });
            const tooltipDateFormatter = new Intl.DateTimeFormat('ar-EG', { year: 'numeric', month: 'long', day: 'numeric' });

            const monthlyFinancials = monthlyFinancialsRaw.map(function (item) {
                return Object.assign({}, item, {
                    monthDate: item.monthDate ? new Date(item.monthDate) : null,
                    monthLabel: item.month
                });
            });

            const cashflowSeries = monthlyFinancials.map(function (item, index) {
                const cumulative = monthlyFinancials
                    .slice(0, index + 1)
                    .reduce(function (sum, current) { return sum + (Number(current.profit) || 0); }, 0);
                return {
                    monthDate: item.monthDate,
                    monthLabel: item.monthLabel,
                    cumulative: cumulative
                };
            });

            const salesScatter = salesScatterRaw.map(function (item) {
                return Object.assign({}, item, {
                    date: item.date ? new Date(item.date) : null
                });
            });

            function axisLabelRender(args) {
                if (args.axis.valueType === 'DateTime' && args.value) {
                    args.text = axisDateFormatter.format(new Date(args.value));
                } else if (args.axis.valueType === 'Double' && typeof args.value === 'number') {
                    args.text = numberFormatter.format(args.value);
                }
            }

            function dataLabelRender(args) {
                if (typeof args.value === 'number') {
                    args.text = numberFormatter.format(args.value);
                }
            }

            function tooltipRender(args) {
                const seriesName = args.series && args.series.name ? args.series.name + ' - ' : '';
                const yValue = typeof args.point.y === 'number'
                    ? numberFormatter.format(args.point.y)
                    : args.point.y;

                if (args.point.x instanceof Date) {
                    const label = args.point.pointData && args.point.pointData.monthLabel
                        ? args.point.pointData.monthLabel
                        : tooltipDateFormatter.format(args.point.x);
                    args.text = seriesName + label + ' : ' + yValue;
                    return;
                }

                if (args.series && args.series.type === 'Scatter') {
                    const xValue = typeof args.point.x === 'number' ? numberFormatter.format(args.point.x) : args.point.x;
                    const scatterDate = args.point.pointData && args.point.pointData.date
                        ? tooltipDateFormatter.format(args.point.pointData.date)
                        : '';
                    let tooltip = 'المبلغ: ' + xValue + '<br/>معامل التحويل: ' + yValue;
                    if (scatterDate) {
                        tooltip += '<br/>التاريخ: ' + scatterDate;
                    }
                    args.text = tooltip;
                    return;
                }

                if (args.series && args.series.type === 'Bubble') {
                    const riskValue = typeof args.point.x === 'number' ? numberFormatter.format(args.point.x) : args.point.x;
                    const returnValue = typeof args.point.y === 'number' ? numberFormatter.format(args.point.y) : args.point.y;
                    const sizeValue = typeof args.point.size === 'number' ? numberFormatter.format(args.point.size) : args.point.size;
                    const sector = args.point.pointData && args.point.pointData.sector ? args.point.pointData.sector + '<br/>' : '';
                    args.text = sector + 'المخاطر: ' + riskValue + '<br/>العائد: ' + returnValue + '<br/>حجم النشاط: ' + sizeValue;
                    return;
                }

                if (typeof args.point.x === 'string') {
                    args.text = seriesName + args.point.x + ' : ' + yValue;
                    return;
                }

                if (typeof args.point.x === 'number') {
                    const xValue = numberFormatter.format(args.point.x);
                    args.text = seriesName + xValue + ' : ' + yValue;
                    return;
                }

                args.text = seriesName + yValue;
            }

            function createChart(selector, config) {
                const chartConfig = Object.assign({
                    enableRtl: true,
                    locale: 'ar',
                    axisLabelRender: axisLabelRender,
                    tooltipRender: tooltipRender,
                    dataLabelRender: dataLabelRender
                }, config);

                chartConfig.tooltip = Object.assign({ enable: true }, config.tooltip || {});

                return new ej.charts.Chart(chartConfig, selector);
            }

            function createAccumulationChart(selector, config) {
                const chartConfig = Object.assign({
                    enableRtl: true,
                    locale: 'ar',
                    tooltipRender: tooltipRender,
                    dataLabelRender: dataLabelRender
                }, config);

                chartConfig.tooltip = Object.assign({ enable: true }, config.tooltip || {});

                return new ej.charts.AccumulationChart(chartConfig, selector);
            }

            ej.charts.Chart.Inject(
                ej.charts.LineSeries,
                ej.charts.ColumnSeries,
                ej.charts.AreaSeries,
                ej.charts.SplineSeries,
                ej.charts.BarSeries,
                ej.charts.Category,
                ej.charts.DateTime,
                ej.charts.Legend,
                ej.charts.DataLabel,
                ej.charts.Tooltip,
                ej.charts.ScatterSeries,
                ej.charts.BubbleSeries,
                ej.charts.PolarSeries,
                ej.charts.RadarSeries
            );

            ej.charts.AccumulationChart.Inject(
                ej.charts.AccumulationLegend,
                ej.charts.PieSeries,
                ej.charts.DoughnutSeries,
                ej.charts.AccumulationTooltip,
                ej.charts.AccumulationDataLabel
            );

            createChart('#lineChart', {
                primaryXAxis: {
                    valueType: 'DateTime',
                    intervalType: 'Months',
                    edgeLabelPlacement: 'Shift',
                    labelFormat: 'y MMM'
                },
                primaryYAxis: { },
                title: 'نمو الإيرادات الشهرية',
                series: [{
                    type: 'Line',
                    dataSource: monthlyFinancials,
                    xName: 'monthDate',
                    yName: 'revenue',
                    name: 'الإيرادات',
                    width: 2,
                    marker: { visible: true }
                }]
            });

            createChart('#columnChart', {
                primaryXAxis: {
                    valueType: 'DateTime',
                    intervalType: 'Months',
                    edgeLabelPlacement: 'Shift',
                    labelFormat: 'y MMM'
                },
                primaryYAxis: { },
                title: 'الأرباح مقابل الإيرادات',
                legendSettings: { visible: true },
                series: [
                    {
                        type: 'Column',
                        dataSource: monthlyFinancials,
                        xName: 'monthDate',
                        yName: 'revenue',
                        name: 'الإيرادات'
                    },
                    {
                        type: 'Column',
                        dataSource: monthlyFinancials,
                        xName: 'monthDate',
                        yName: 'profit',
                        name: 'الأرباح'
                    }
                ]
            });

            createChart('#splineChart', {
                primaryXAxis: {
                    valueType: 'DateTime',
                    intervalType: 'Months',
                    edgeLabelPlacement: 'Shift',
                    labelFormat: 'y MMM'
                },
                primaryYAxis: { },
                title: 'النفقات المتراكمة',
                series: [{
                    type: 'Spline',
                    dataSource: monthlyFinancials,
                    xName: 'monthDate',
                    yName: 'expenses',
                    marker: { visible: true }
                }]
            });

            createChart('#areaChart', {
                primaryXAxis: {
                    valueType: 'DateTime',
                    intervalType: 'Months',
                    edgeLabelPlacement: 'Shift',
                    labelFormat: 'y MMM'
                },
                primaryYAxis: { },
                title: 'صافي التدفق النقدي',
                series: [
                    {
                        type: 'Area',
                        dataSource: monthlyFinancials,
                        xName: 'monthDate',
                        yName: 'revenue',
                        name: 'الإيرادات'
                    },
                    {
                        type: 'Area',
                        dataSource: monthlyFinancials,
                        xName: 'monthDate',
                        yName: 'expenses',
                        name: 'النفقات'
                    },
                    {
                        type: 'SplineArea',
                        dataSource: cashflowSeries,
                        xName: 'monthDate',
                        yName: 'cumulative',
                        name: 'التدفق التراكمي'
                    }
                ]
            });

            createChart('#barChart', {
                primaryXAxis: { valueType: 'Category' },
                primaryYAxis: { },
                title: 'مستوى الأداء حسب القسم',
                series: [{
                    type: 'Bar',
                    dataSource: departmentPerformance,
                    xName: 'department',
                    yName: 'score',
                    dataLabel: { visible: true, position: 'Top' }
                }]
            });

            createAccumulationChart('#pieChart', {
                title: 'الحصة السوقية حسب الفروع',
                legendSettings: { visible: true },
                series: [{
                    dataSource: marketShare,
                    xName: 'company',
                    yName: 'share',
                    dataLabel: { visible: true, position: 'Outside', name: 'company' }
                }]
            });

            createAccumulationChart('#doughnutChart', {
                title: 'مصادر الدخل الرئيسية',
                legendSettings: { visible: true },
                series: [{
                    type: 'Doughnut',
                    innerRadius: '45%',
                    dataSource: incomeSources,
                    xName: 'source',
                    yName: 'value',
                    dataLabel: { visible: true, position: 'Inside', name: 'source' }
                }]
            });

            createChart('#scatterChart', {
                primaryXAxis: { title: 'المبلغ', valueType: 'Double' },
                primaryYAxis: { title: 'معامل التحويل', valueType: 'Double' },
                title: 'العلاقة بين قيمة سندات القبض ومعامل التحويل',
                series: [{
                    type: 'Scatter',
                    dataSource: salesScatter,
                    xName: 'price',
                    yName: 'units',
                    marker: { width: 12, height: 12 }
                }]
            });

            createChart('#bubbleChart', {
                primaryXAxis: { title: 'إجمالي النفقات', valueType: 'Double' },
                primaryYAxis: { title: 'إجمالي الإيرادات', valueType: 'Double' },
                title: 'المخاطر مقابل العائد حسب الفروع',
                series: [{
                    type: 'Bubble',
                    dataSource: riskReturn,
                    xName: 'risk',
                    yName: 'return',
                    size: 'size',
                    name: 'الفروع'
                }]
            });

            createChart('#radarChart', {
                primaryXAxis: { valueType: 'Category' },
                primaryYAxis: { minimum: 0, maximum: 5, interval: 1 },
                title: 'تقييم بطاقة الأداء المتوازن',
                series: [{
                    type: 'Radar',
                    drawType: 'Area',
                    dataSource: balancedScorecard,
                    xName: 'dimension',
                    yName: 'score',
                    name: 'الدرجات'
                }]
            });
        });
    </script>
}
