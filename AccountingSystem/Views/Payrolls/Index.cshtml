@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Globalization
@{
    ViewData["Title"] = "إدارة الرواتب";
    var branches = ViewBag.Branches as List<SelectListItem> ?? new();
    var history = ViewBag.History as List<AccountingSystem.ViewModels.PayrollBatchHistoryViewModel> ?? new();
    var culture = new CultureInfo("ar");
}

<div class="container-fluid payroll-container">
    @Html.AntiForgeryToken()
    <div class="row g-3 mb-3">
        <div class="col-md-4">
            <label class="form-label">الفرع</label>
            <select id="branchSelect" class="form-select">
                <option value="">اختر الفرع</option>
                @foreach (var branch in branches)
                {
                    <option value="@branch.Value">@branch.Text</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label">رواتب شهر</label>
            <select id="monthSelect" class="form-select" disabled>
                <option value="">اختر شهر الرواتب</option>
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-end justify-content-end">
            <div class="btn-group">
                <button class="btn btn-outline-secondary" id="selectAllBtn"><i class="fas fa-check-square"></i> تحديد الكل</button>
                <button class="btn btn-outline-secondary" id="clearSelectionBtn"><i class="fas fa-times"></i> إلغاء التحديد</button>
                <button class="btn btn-primary" id="processPayrollBtn" asp-require-permission="payroll.process">
                    <i class="fas fa-download"></i> تنزيل الرواتب
                </button>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">الموظفون</h5>
            <span class="badge bg-secondary" id="selectedCount">0 موظف محدد</span>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover align-middle" id="employeesTable">
                    <thead class="table-light">
                        <tr>
                            <th></th>
                            <th>الاسم</th>
                            <th>المسمى الوظيفي</th>
                            <th>الراتب الأساسي</th>
                            <th>الخصومات</th>
                            <th>الصافي</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="text-center text-muted" id="employeesPlaceholder">
                            <td colspan="6">اختر فرعاً لعرض الموظفين</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="card shadow-sm mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">سجل تنزيل الرواتب</h5>
            <button class="btn btn-sm btn-outline-primary" id="refreshHistoryBtn">
                <i class="fas fa-sync"></i> تحديث
            </button>
        </div>
        <div class="card-body">
            @if (history.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped" id="historyTable">
                        <thead class="table-light">
                            <tr>
                                <th>الرقم</th>
                                <th>الفرع</th>
                                <th>شهر الرواتب</th>
                                <th>الموظفون</th>
                                <th>الإجمالي</th>
                                <th>الحالة</th>
                                <th>التاريخ</th>
                                <th>مرجع القيد</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in history)
                            {
                                <tr>
                                    <td>#@item.Id</td>
                                    <td>@item.BranchName</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(item.PeriodName))
                                        {
                                            @item.PeriodName
                                        }
                                        else if (item.Year > 0 && item.Month > 0)
                                        {
                                            @(new System.DateTime(item.Year, item.Month, 1).ToString("MMMM yyyy", culture))
                                        }
                                        else
                                        {
                                            <span class="text-muted">---</span>
                                        }
                                    </td>
                                    <td>@item.EmployeeCount</td>
                                    <td>@item.TotalAmount.ToString("N2")</td>
                                    <td>
                                        @switch (item.Status)
                                        {
                                            case "Draft":
                                                <span class="badge bg-warning text-dark">مسودة</span>
                                                break;
                                            case "Confirmed":
                                                <span class="badge bg-success">مؤكد</span>
                                                break;
                                            default:
                                                <span class="badge bg-secondary">@item.Status</span>
                                                break;
                                        }
                                    </td>
                                    <td>
                                        <div>@item.CreatedAt.ToString("dd/MM/yyyy HH:mm")</div>
                                        @if (item.ConfirmedAt.HasValue)
                                        {
                                            <small class="text-muted">تم التأكيد: @item.ConfirmedAt.Value.ToString("dd/MM/yyyy HH:mm")</small>
                                        }
                                    </td>
                                    <td>@item.ReferenceNumber</td>
                                    <td>
                                        <div class="d-flex flex-wrap gap-2">
                                            <button type="button" class="btn btn-outline-info btn-sm view-batch" data-id="@item.Id" title="عرض التفاصيل">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            @if (item.Status == "Draft")
                                            {
                                                <button type="button" class="btn btn-success btn-sm confirm-batch" data-id="@item.Id" title="اعتماد الدفعة" asp-require-permission="payroll.process">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                                <button type="button" class="btn btn-danger btn-sm delete-batch" data-id="@item.Id" title="حذف الدفعة" asp-require-permission="payroll.process">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info text-center">
                    لا توجد عمليات تنزيل سابقة
                </div>
            }
        </div>
    </div>
</div>







@section Styles {
    <style>
        .payroll-container {
            position: relative;
        }

        .payroll-overlay {
            position: absolute;
            inset: 0;
            background-color: rgba(255, 255, 255, 0.85);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1050;
        }

        #employeesTable tbody tr.selected {
            background-color: rgba(0, 123, 255, 0.1);
        }

        .deduction-summary {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 0.5rem;
        }

        .deduction-total-badge {
            min-width: 90px;
            text-align: center;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const branchSelect = document.getElementById('branchSelect');
            const monthSelect = document.getElementById('monthSelect');
            const employeesTable = document.getElementById('employeesTable').querySelector('tbody');
            const selectAllBtn = document.getElementById('selectAllBtn');
            const clearSelectionBtn = document.getElementById('clearSelectionBtn');
            const processBtn = document.getElementById('processPayrollBtn');
            const confirmBtn = document.getElementById('confirmPayrollBtn');
            const selectedCount = document.getElementById('selectedCount');
            const overlay = document.getElementById('loadingOverlay');
            const summaryModal = new bootstrap.Modal(document.getElementById('summaryModal'));
            const detailsModal = new bootstrap.Modal(document.getElementById('detailsModal'));
            const summaryContent = document.getElementById('summaryContent');
            const detailsContent = document.getElementById('detailsContent');
            const historyTable = document.getElementById('historyTable');
            const refreshHistoryBtn = document.getElementById('refreshHistoryBtn');
            const antiForgery = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const deductionModalElement = document.getElementById('deductionModal');
            const deductionModal = deductionModalElement ? new bootstrap.Modal(deductionModalElement) : null;
            const deductionModalTitle = document.getElementById('deductionModalTitle');
            const deductionTable = document.getElementById('deductionTable');
            const deductionTableBody = document.getElementById('deductionTableBody');
            const deductionEmptyState = document.getElementById('deductionEmptyState');
            const addDeductionBtn = document.getElementById('addDeductionBtn');
            const saveDeductionBtn = document.getElementById('saveDeductionBtn');
            const employeeDeductions = new Map();
            let deductionTypes = [];
            const deductionTypeMap = new Map();
            let activeDeductionRow = null;
            let activeDeductionEmployeeId = null;
            let activeDeductionSalary = 0;
            let currentBatchId = null;

            function escapeHtml(value) {
                if (value === null || value === undefined) {
                    return '';
                }

                return String(value)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            }

            function toggleOverlay(show) {
                if (!overlay) {
                    return;
                }

                overlay.classList.toggle('d-none', !show);
            }

            function getSelectedBranchId() {
                const value = branchSelect.value;
                if (!value) {
                    return null;
                }

                const id = parseInt(value, 10);
                return Number.isNaN(id) ? null : id;
            }

            function updateSelectedCount() {
                const checked = employeesTable.querySelectorAll('input[type="checkbox"]:checked').length;
                selectedCount.textContent = `${checked} موظف محدد`;
            }

            function getProperty(obj, ...names) {
                for (const name of names) {
                    if (obj && Object.prototype.hasOwnProperty.call(obj, name) && obj[name] !== undefined && obj[name] !== null) {
                        return obj[name];
                    }
                }
                return undefined;
            }

            function setDeductionTypes(data) {
                deductionTypes = Array.isArray(data) ? data : [];
                deductionTypeMap.clear();
                deductionTypes.forEach(item => {
                    const idValue = getProperty(item, 'id', 'Id');
                    const id = typeof idValue === 'number' ? idValue : parseInt(idValue ?? '', 10);
                    if (!Number.isNaN(id)) {
                        deductionTypeMap.set(id, item);
                    }
                });
            }

            async function loadDeductionTypes() {
                try {
                    const response = await fetch('@Url.Action("DeductionTypes")');
                    if (!response.ok) {
                        console.error('تعذر تحميل أنواع الخصومات');
                        setDeductionTypes([]);
                        return;
                    }

                    const data = await response.json();
                    setDeductionTypes(data);
                } catch (error) {
                    console.error('تعذر تحميل أنواع الخصومات', error);
                    setDeductionTypes([]);
                }
            }

            function findDeductionType(id) {
                if (id === null || id === undefined) {
                    return null;
                }

                const numericId = typeof id === 'number' ? id : parseInt(id, 10);
                if (Number.isNaN(numericId)) {
                    return null;
                }

                return deductionTypeMap.get(numericId) ?? null;
            }

            function buildDeductionTypeOptions(selectedId) {
                const options = ['<option value="">اختر نوع الخصم</option>'];
                const selectedNumeric = typeof selectedId === 'number' ? selectedId : parseInt(selectedId ?? '', 10);

                deductionTypes.forEach(item => {
                    const idValue = getProperty(item, 'id', 'Id');
                    const id = typeof idValue === 'number' ? idValue : parseInt(idValue ?? '', 10);
                    if (Number.isNaN(id)) {
                        return;
                    }

                    const name = getProperty(item, 'name', 'Name') ?? '';
                    const selectedAttr = !Number.isNaN(selectedNumeric) && id === selectedNumeric ? ' selected' : '';
                    options.push(`<option value="${id}"${selectedAttr}>${escapeHtml(name)}</option>`);
                });

                return options.join('');
            }

            function sanitizeDeduction(item) {
                if (!item || typeof item !== 'object') {
                    return null;
                }

                const typeIdValue = getProperty(item, 'deductionTypeId', 'DeductionTypeId');
                const typeId = typeof typeIdValue === 'number' ? typeIdValue : parseInt(typeIdValue ?? '', 10);
                if (Number.isNaN(typeId) || typeId <= 0) {
                    return null;
                }

                const amountValue = getProperty(item, 'amount', 'Amount');
                const amount = Number(amountValue ?? 0);
                if (!Number.isFinite(amount) || amount <= 0) {
                    return null;
                }

                const descriptionValue = getProperty(item, 'description', 'Description') ?? '';
                const typeInfo = findDeductionType(typeId);
                const typeName = getProperty(item, 'type', 'Type') ?? getProperty(typeInfo, 'name', 'Name') ?? '';

                let accountName = getProperty(item, 'accountName', 'AccountName');
                if (!accountName && typeInfo) {
                    accountName = getProperty(typeInfo, 'accountName', 'AccountName') ?? null;
                    if (!accountName) {
                        accountName = getProperty(typeInfo, 'accountCode', 'AccountCode') ?? null;
                    }
                }

                return {
                    deductionTypeId: typeId,
                    type: typeName || null,
                    description: descriptionValue ? descriptionValue : null,
                    amount: Number(amount.toFixed(2)),
                    accountName: accountName || null
                };
            }

            async function loadMonths() {
                monthSelect.innerHTML = '<option value="">اختر شهر الرواتب</option>';
                monthSelect.disabled = true;

                const branchId = getSelectedBranchId();
                if (branchId === null) {
                    return;
                }

                const response = await fetch(`@Url.Action("AvailableMonths")?branchId=${branchId}`);
                if (!response.ok) {
                    alert('تعذر تحميل أشهر الرواتب المتاحة');
                    return;
                }

                const data = await response.json();
                if (!Array.isArray(data) || data.length === 0) {
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = 'لا توجد أشهر متاحة';
                    option.disabled = true;
                    monthSelect.appendChild(option);
                    return;
                }

                data.forEach(item => {
                    const year = getProperty(item, 'year', 'Year');
                    const month = getProperty(item, 'month', 'Month');
                    const name = getProperty(item, 'name', 'Name') ?? '';
                    if (year === undefined || month === undefined) {
                        return;
                    }

                    const option = document.createElement('option');
                    option.value = `${year}-${month}`;
                    option.textContent = name;
                    monthSelect.appendChild(option);
                });

                monthSelect.disabled = false;
            }

            function formatCurrency(value) {
                const number = Number(value ?? 0);
                if (!Number.isFinite(number)) {
                    return '0.00';
                }
                return number.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            }

            function calculateDeductionTotal(deductions) {
                if (!Array.isArray(deductions)) {
                    return 0;
                }

                return deductions.reduce((sum, item) => {
                    const amount = Number(item?.amount ?? 0);
                    return sum + (Number.isFinite(amount) ? amount : 0);
                }, 0);
            }

            function getRowEmployeeId(row) {
                if (!row) {
                    return null;
                }

                const id = parseInt(row.dataset.id ?? '', 10);
                return Number.isNaN(id) ? null : id;
            }

            function updateRowTotals(row) {
                if (!row) {
                    return;
                }

                const employeeId = getRowEmployeeId(row);
                if (employeeId === null) {
                    return;
                }

                const salary = Number(row.dataset.salary ?? '0');
                const deductions = employeeDeductions.get(employeeId) ?? [];
                const total = Math.min(calculateDeductionTotal(deductions), Number.isFinite(salary) ? salary : 0);
                const net = Math.max(0, (Number.isFinite(salary) ? salary : 0) - total);

                const totalBadge = row.querySelector('.deduction-total');
                if (totalBadge) {
                    totalBadge.textContent = formatCurrency(total);
                }

                const netCell = row.querySelector('.net-amount');
                if (netCell) {
                    netCell.textContent = formatCurrency(net);
                }
            }

            function setDeductionTableVisibility() {
                if (!deductionTable || !deductionEmptyState) {
                    return;
                }

                const hasRows = deductionTableBody && deductionTableBody.children.length > 0;
                deductionTable.classList.toggle('d-none', !hasRows);
                deductionEmptyState.classList.toggle('d-none', hasRows);
            }

            function buildDeductionRow(data = {}) {
                const row = document.createElement('tr');
                const typeIdValue = getProperty(data, 'deductionTypeId', 'DeductionTypeId');
                const typeId = typeof typeIdValue === 'number' ? typeIdValue : parseInt(typeIdValue ?? '', 10);
                const description = data?.description ?? '';
                const amountValue = Number(data?.amount ?? 0);
                const amount = Number.isFinite(amountValue) ? amountValue.toFixed(2) : '0.00';
                const accountName = getProperty(data, 'accountName', 'AccountName') ?? '';
                const options = buildDeductionTypeOptions(typeId);

                row.innerHTML = `
                    <td>
                        <select class="form-select form-select-sm deduction-type">
                            ${options}
                        </select>
                        <div class="form-text text-muted deduction-account">${escapeHtml(accountName)}</div>
                    </td>
                    <td><input type="text" class="form-control form-control-sm deduction-description" maxlength="250" value="${escapeHtml(description)}" /></td>
                    <td class="text-end"><input type="number" class="form-control form-control-sm deduction-amount" min="0" step="0.01" value="${amount}" /></td>
                    <td class="text-center">
                        <button type="button" class="btn btn-outline-danger btn-sm remove-deduction" title="حذف الخصم">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>`;

                const removeBtn = row.querySelector('.remove-deduction');
                if (removeBtn) {
                    removeBtn.addEventListener('click', () => {
                        row.remove();
                        setDeductionTableVisibility();
                    });
                }

                const accountLabel = row.querySelector('.deduction-account');
                const typeSelect = row.querySelector('.deduction-type');
                const updateAccountLabel = () => {
                    if (!typeSelect || !accountLabel) {
                        return;
                    }
                    const typeInfo = findDeductionType(typeSelect.value);
                    const label = typeInfo
                        ? (getProperty(typeInfo, 'accountName', 'AccountName') ?? getProperty(typeInfo, 'accountCode', 'AccountCode') ?? '')
                        : '';
                    accountLabel.textContent = label ?? '';
                };

                if (typeSelect && deductionTypes.length > 0 && Number.isFinite(typeId) && !Number.isNaN(typeId)) {
                    typeSelect.value = String(typeId);
                }

                if (typeSelect) {
                    typeSelect.addEventListener('change', updateAccountLabel);
                }
                updateAccountLabel();

                return row;
            }

            function renderDeductionTable(deductions) {
                if (!deductionTableBody) {
                    return;
                }

                deductionTableBody.innerHTML = '';
                const items = Array.isArray(deductions) ? deductions : [];
                items
                    .map(item => sanitizeDeduction(item))
                    .filter(item => item)
                    .forEach(item => {
                        deductionTableBody.appendChild(buildDeductionRow(item));
                    });

                setDeductionTableVisibility();
            }

            function openDeductionModal(row) {
                if (!deductionModal) {
                    return;
                }

                const employeeId = getRowEmployeeId(row);
                if (employeeId === null) {
                    return;
                }

                activeDeductionRow = row;
                activeDeductionEmployeeId = employeeId;
                activeDeductionSalary = Number(row.dataset.salary ?? '0');

                const employeeName = row.dataset.name ?? '';
                if (deductionModalTitle) {
                    deductionModalTitle.textContent = employeeName ? `الخصومات - ${employeeName}` : 'الخصومات';
                }

                const existing = (employeeDeductions.get(employeeId) ?? [])
                    .map(item => sanitizeDeduction(item))
                    .filter(item => item);

                renderDeductionTable(existing);
                deductionModal.show();
            }

            function collectDeductionsFromModal() {
                if (!deductionTableBody) {
                    return { items: [], hasMissingType: false };
                }

                let hasMissingType = false;
                const items = Array.from(deductionTableBody.querySelectorAll('tr'))
                    .map(row => {
                        const typeSelect = row.querySelector('.deduction-type');
                        const descriptionInput = row.querySelector('.deduction-description');
                        const amountInput = row.querySelector('.deduction-amount');

                        const typeValue = typeSelect?.value ?? '';
                        const typeId = parseInt(typeValue, 10);
                        if (!typeSelect || Number.isNaN(typeId) || typeId <= 0) {
                            hasMissingType = true;
                            return null;
                        }

                        let amount = parseFloat(amountInput?.value ?? '0');
                        if (!Number.isFinite(amount) || amount < 0) {
                            amount = 0;
                        }
                        amount = Number(amount.toFixed(2));
                        if (amount <= 0) {
                            return null;
                        }

                        const description = descriptionInput?.value?.trim() ?? '';
                        const typeInfo = findDeductionType(typeId);
                        const typeName = typeInfo ? getProperty(typeInfo, 'name', 'Name') ?? '' : '';
                        const accountName = typeInfo
                            ? (getProperty(typeInfo, 'accountName', 'AccountName') ?? getProperty(typeInfo, 'accountCode', 'AccountCode') ?? null)
                            : null;

                        return {
                            deductionTypeId: typeId,
                            type: typeName || null,
                            description: description || null,
                            amount,
                            accountName
                        };
                    })
                    .filter(item => item !== null);

                return { items, hasMissingType };
            }

            function buildDeductionDetails(deductions) {
                if (!Array.isArray(deductions) || deductions.length === 0) {
                    return '<span class="text-muted">---</span>';
                }

                let content = '<ul class="list-unstyled mb-0">';
                deductions.forEach(item => {
                    const amount = getProperty(item, 'amount', 'Amount');
                    const type = getProperty(item, 'type', 'Type') ?? '';
                    const description = getProperty(item, 'description', 'Description') ?? '';
                    const accountName = getProperty(item, 'accountName', 'AccountName') ?? '';
                    const labelParts = [];
                    if (type) {
                        labelParts.push(type);
                    }
                    if (description) {
                        labelParts.push(description);
                    }
                    const label = labelParts.length ? `<span class="fw-semibold">${escapeHtml(labelParts.join(' - '))}</span>: ` : '';
                    content += `<li>${label}${formatCurrency(amount)}`;
                    if (accountName) {
                        content += `<div class="text-muted small">${escapeHtml(accountName)}</div>`;
                    }
                    content += '</li>';
                });
                content += '</ul>';
                return content;
            }

            function renderEmployees(employees) {
                employeesTable.innerHTML = '';
                if (!employees.length) {
                    const row = document.createElement('tr');
                    row.className = 'text-center text-muted';
                    row.innerHTML = '<td colspan="6">لا يوجد موظفون متاحون</td>';
                    employeesTable.appendChild(row);
                    updateSelectedCount();
                    return;
                }

                employees.forEach(emp => {
                    const row = document.createElement('tr');
                    const employeeIdRaw = getProperty(emp, 'id', 'Id');
                    const employeeId = typeof employeeIdRaw === 'number' ? employeeIdRaw : parseInt(employeeIdRaw, 10);
                    if (Number.isNaN(employeeId)) {
                        return;
                    }

                    const employeeName = getProperty(emp, 'name', 'Name') ?? '';
                    const jobTitle = getProperty(emp, 'jobTitle', 'JobTitle') ?? '';
                    const salaryRaw = getProperty(emp, 'salary', 'Salary');
                    const salary = Number(salaryRaw ?? 0);
                    const serverDeductions = getProperty(emp, 'deductions', 'Deductions');
                    const sanitizedDeductions = Array.isArray(serverDeductions)
                        ? serverDeductions.map(item => sanitizeDeduction(item)).filter(item => item)
                        : [];
                    employeeDeductions.set(employeeId, sanitizedDeductions);

                    const totalDeduction = calculateDeductionTotal(sanitizedDeductions);
                    const netAmount = Math.max(0, (Number.isFinite(salary) ? salary : 0) - totalDeduction);

                    row.dataset.id = String(employeeId);
                    row.dataset.salary = String(Number.isFinite(salary) ? salary : 0);
                    row.dataset.name = employeeName;

                    const safeName = escapeHtml(employeeName);
                    const safeJobTitle = escapeHtml(jobTitle);

                    row.innerHTML = `
                        <td><input type="checkbox" class="form-check-input" value="${employeeId}" /></td>
                        <td><strong>${safeName}</strong><div class="text-muted small">${safeJobTitle}</div></td>
                        <td>${safeJobTitle}</td>
                        <td class="text-end">${formatCurrency(salary)}</td>
                        <td>
                            <div class="deduction-summary">
                                <span class="badge bg-light text-dark deduction-total deduction-total-badge" dir="ltr">${formatCurrency(totalDeduction)}</span>
                                <button type="button" class="btn btn-outline-secondary btn-sm manage-deductions">
                                    <i class="fas fa-sliders-h"></i> إدارة
                                </button>
                            </div>
                        </td>
                        <td class="text-end net-amount">${formatCurrency(netAmount)}</td>`;

                    const checkbox = row.querySelector('input[type="checkbox"]');
                    if (checkbox) {
                        checkbox.addEventListener('change', () => {
                            row.classList.toggle('selected', checkbox.checked);
                            updateSelectedCount();
                        });
                    }

                    const manageBtn = row.querySelector('.manage-deductions');
                    if (manageBtn && deductionModal) {
                        manageBtn.addEventListener('click', () => openDeductionModal(row));
                    }

                    employeesTable.appendChild(row);
                    updateRowTotals(row);
                });

                updateSelectedCount();
            }

            async function loadEmployees() {
                const branchId = getSelectedBranchId();
                employeesTable.innerHTML = '';
                employeeDeductions.clear();

                const row = document.createElement('tr');
                row.className = 'text-center text-muted';
                row.innerHTML = '<td colspan="6"><div class="spinner-border spinner-border-sm text-primary"></div> جاري تحميل الموظفين...</td>';
                employeesTable.appendChild(row);

                if (branchId === null) {
                    row.innerHTML = '<td colspan="6">اختر فرعاً لعرض الموظفين</td>';
                    updateSelectedCount();
                    return;
                }

                let url = `@Url.Action("Employees")?branchId=${branchId}`;
                const periodValue = monthSelect.value;
                if (periodValue) {
                    const [periodYear, periodMonth] = periodValue.split('-').map(part => parseInt(part, 10));
                    if (!Number.isNaN(periodYear) && !Number.isNaN(periodMonth)) {
                        url += `&year=${periodYear}&month=${periodMonth}`;
                    }
                }

                const response = await fetch(url);
                const data = await response.json();
                renderEmployees(Array.isArray(data) ? data : []);
            }

            if (deductionModalElement) {
                deductionModalElement.addEventListener('hidden.bs.modal', () => {
                    activeDeductionRow = null;
                    activeDeductionEmployeeId = null;
                    activeDeductionSalary = 0;
                    if (deductionTableBody) {
                        deductionTableBody.innerHTML = '';
                    }
                    setDeductionTableVisibility();
                });
            }

            if (addDeductionBtn && deductionModal) {
                addDeductionBtn.addEventListener('click', () => {
                    if (!deductionTableBody) {
                        return;
                    }

                    if (!Array.isArray(deductionTypes) || deductionTypes.length === 0) {
                        alert('يرجى تعريف أنواع الخصومات أولاً.');
                        return;
                    }

                    deductionTableBody.appendChild(buildDeductionRow({ amount: 0 }));
                    setDeductionTableVisibility();
                    const amountInput = deductionTableBody.querySelector('tr:last-child .deduction-amount');
                    amountInput?.focus();
                });
            }

            if (saveDeductionBtn && deductionModal) {
                saveDeductionBtn.addEventListener('click', () => {
                    if (!activeDeductionRow || activeDeductionEmployeeId === null) {
                        deductionModal.hide();
                        return;
                    }

                    const result = collectDeductionsFromModal();
                    if (result.hasMissingType) {
                        alert('يرجى اختيار نوع الخصم لكل سطر.');
                        return;
                    }

                    const deductions = result.items;
                    const total = calculateDeductionTotal(deductions);
                    if (activeDeductionSalary > 0 && total > activeDeductionSalary + 0.01) {
                        alert('إجمالي الخصومات يتجاوز الراتب الأساسي لهذا الموظف.');
                        return;
                    }

                    employeeDeductions.set(activeDeductionEmployeeId, deductions);
                    updateRowTotals(activeDeductionRow);
                    deductionModal.hide();
                });
            }

            await loadDeductionTypes();

            branchSelect.addEventListener('change', () => {
                currentBatchId = null;
                summaryContent.innerHTML = '';
                loadMonths();
                loadEmployees();
            });

            monthSelect.addEventListener('change', () => {
                currentBatchId = null;
                summaryContent.innerHTML = '';
                loadEmployees();
            });

            selectAllBtn.addEventListener('click', function (e) {
                e.preventDefault();
                employeesTable.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                    cb.checked = true;
                    cb.closest('tr')?.classList.add('selected');
                });
                updateSelectedCount();
            });

            clearSelectionBtn.addEventListener('click', function (e) {
                e.preventDefault();
                employeesTable.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                    cb.checked = false;
                    cb.closest('tr')?.classList.remove('selected');
                });
                updateSelectedCount();
            });

            processBtn.addEventListener('click', async function (e) {
                e.preventDefault();
                const branchId = getSelectedBranchId();
                const periodValue = monthSelect.value;
                const selectedCheckboxes = Array.from(employeesTable.querySelectorAll('input[type="checkbox"]:checked'));

                if (branchId === null) {
                    alert('يرجى اختيار الفرع.');
                    return;
                }
                if (!periodValue) {
                    alert('يرجى اختيار شهر الرواتب.');
                    return;
                }
                if (selectedCheckboxes.length === 0) {
                    alert('يرجى اختيار موظف واحد على الأقل.');
                    return;
                }

                let invalidEmployeeName = null;
                const employeesPayload = [];

                selectedCheckboxes.forEach(cb => {
                    const id = parseInt(cb.value, 10);
                    if (Number.isNaN(id)) {
                        return;
                    }

                    const row = cb.closest('tr');
                    const salary = Number(row?.dataset.salary ?? '0');
                    const name = row?.dataset.name ?? '';
                    const deductions = (employeeDeductions.get(id) ?? [])
                        .map(item => sanitizeDeduction(item))
                        .filter(item => item)
                        .map(item => ({
                            deductionTypeId: item.deductionTypeId,
                            type: item.type ? item.type.toString().trim() : null,
                            description: item.description ? item.description.toString().trim() : null,
                            amount: Number(Number(item.amount ?? 0).toFixed(2))
                        }))
                        .filter(item => Number.isFinite(item.amount) && item.amount > 0);

                    const total = calculateDeductionTotal(deductions);
                    if (Number.isFinite(salary) && salary > 0 && total > salary + 0.01) {
                        invalidEmployeeName = name || `#${id}`;
                        return;
                    }

                    employeesPayload.push({
                        employeeId: id,
                        deductions
                    });
                });

                if (invalidEmployeeName) {
                    alert(`إجمالي الخصومات يتجاوز الراتب الأساسي للموظف ${invalidEmployeeName}. يرجى تعديل الخصومات.`);
                    return;
                }

                if (employeesPayload.length === 0) {
                    alert('يرجى اختيار موظف واحد على الأقل.');
                    return;
                }

                const [year, month] = periodValue.split('-').map(part => parseInt(part, 10));

                toggleOverlay(true);
                try {
                    const response = await fetch('@Url.Action("CreateBatch")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgery
                        },
                        body: JSON.stringify({
                            branchId,
                            year,
                            month,
                            employees: employeesPayload
                        })
                    });

                    const result = await response.json();
                    const createSuccess = getProperty(result, 'success', 'Success');
                    const isCreateSuccess = createSuccess === true || createSuccess === 'true';
                    if (!response.ok || !isCreateSuccess) {
                        const message = getProperty(result, 'message', 'Message');
                        alert(message || 'حدث خطأ أثناء إنشاء الدفعة');
                        return;
                    }

                    const summary = getProperty(result, 'summary', 'Summary') ?? {};
                    const batchId = getProperty(summary, 'batchId', 'BatchId');
                    const employeeCountRaw = getProperty(summary, 'employeeCount', 'EmployeeCount');
                    const totalAmountRaw = getProperty(summary, 'totalAmount', 'TotalAmount');
                    const totalGrossRaw = getProperty(summary, 'totalGrossAmount', 'TotalGrossAmount');
                    const totalDeductionRaw = getProperty(summary, 'totalDeductionAmount', 'TotalDeductionAmount');
                    const employeeCount = Number.isFinite(employeeCountRaw) ? employeeCountRaw : parseInt(employeeCountRaw ?? '0', 10) || 0;
                    const totalAmountValue = Number(totalAmountRaw ?? 0);
                    const totalGrossValue = Number(totalGrossRaw ?? 0);
                    const totalDeductionValue = Number(totalDeductionRaw ?? 0);
                    const totalAmount = Number.isNaN(totalAmountValue) ? 0 : totalAmountValue;
                    const totalGross = Number.isNaN(totalGrossValue) ? 0 : totalGrossValue;
                    const totalDeduction = Number.isNaN(totalDeductionValue) ? 0 : totalDeductionValue;
                    currentBatchId = typeof batchId === 'number' ? batchId : parseInt(batchId ?? '', 10);
                    if (Number.isNaN(currentBatchId)) {
                        currentBatchId = null;
                    }
                    summaryContent.innerHTML = `
                        <div class="list-group">
                            <div class="list-group-item d-flex justify-content-between">
                                <span>شهر الرواتب</span>
                                <strong>${monthSelect.options[monthSelect.selectedIndex]?.textContent ?? ''}</strong>
                            </div>
                            <div class="list-group-item d-flex justify-content-between">
                                <span>عدد الموظفين</span>
                                <strong>${employeeCount}</strong>
                            </div>
                            <div class="list-group-item d-flex justify-content-between">
                                <span>إجمالي الرواتب الأساسية</span>
                                <strong>${formatCurrency(totalGross)}</strong>
                            </div>
                            <div class="list-group-item d-flex justify-content-between">
                                <span>إجمالي الخصومات</span>
                                <strong>${formatCurrency(totalDeduction)}</strong>
                            </div>
                            <div class="list-group-item d-flex justify-content-between">
                                <span>صافي الرواتب</span>
                                <strong>${formatCurrency(totalAmount)}</strong>
                            </div>
                        </div>`;

                    summaryModal.show();
                    await loadEmployees();
                } finally {
                    toggleOverlay(false);
                }
            });

            confirmBtn.addEventListener('click', async function () {
                if (!currentBatchId) {
                    return;
                }

                confirmBtn.disabled = true;
                confirmBtn.querySelector('.spinner-border')?.classList.remove('d-none');
                try {
                    const response = await fetch('@Url.Action("ConfirmBatch")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgery
                        },
                        body: JSON.stringify({ batchId: currentBatchId })
                    });

                    const result = await response.json();
                    const success = getProperty(result, 'success', 'Success');
                    const isSuccess = success === true || success === 'true';
                    if (!response.ok || !isSuccess) {
                        const message = getProperty(result, 'message', 'Message');
                        alert(message || 'حدث خطأ أثناء تأكيد الدفعة');
                        return;
                    }

                    summaryModal.hide();
                    const journalsRaw = getProperty(result, 'journals', 'Journals');
                    const journals = Array.isArray(journalsRaw)
                        ? journalsRaw
                        : (journalsRaw ? [journalsRaw] : []);
                    alert('تم تأكيد تنزيل الرواتب بنجاح. أرقام القيود: ' + journals.join(', '));
                    await loadEmployees();
                    window.location.reload();
                } finally {
                    confirmBtn.disabled = false;
                    confirmBtn.querySelector('.spinner-border')?.classList.add('d-none');
                }
            });

            if (refreshHistoryBtn) {
                refreshHistoryBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    window.location.reload();
                });
            }

            function attachHistoryActions() {
                if (!historyTable) {
                    return;
                }

                historyTable.querySelectorAll('.view-batch').forEach(btn => {
                    btn.addEventListener('click', async function () {
                        const id = this.getAttribute('data-id');
                        const response = await fetch(`@Url.Action("BatchDetails")?id=${id}`);
                        if (!response.ok) {
                            alert('تعذر تحميل تفاصيل الدفعة');
                            return;
                        }
                        const data = await response.json();
                        const periodDate = data.year && data.month
                            ? new Date(data.year, data.month - 1, 1).toLocaleDateString('ar', { year: 'numeric', month: 'long' })
                            : '';
                        let html = '';
                        if (periodDate) {
                            html += `<div class="mb-3"><strong>شهر الرواتب:</strong> ${periodDate}</div>`;
                        }
                        html += `<div class="mb-3"><strong>الحالة:</strong> ${data.status}</div>`;
                        html += `<div class="mb-3"><strong>المرجع:</strong> ${data.reference || '---'}</div>`;
                        html += '<table class="table table-sm"><thead><tr><th>الموظف</th><th>المسمى الوظيفي</th><th class="text-end">الراتب الأساسي</th><th class="text-end">إجمالي الخصومات</th><th>تفاصيل الخصومات</th><th class="text-end">الصافي</th></tr></thead><tbody>';
                        (data.employees ?? []).forEach(emp => {
                            const name = getProperty(emp, 'name', 'Name') ?? '';
                            const title = getProperty(emp, 'jobTitle', 'JobTitle') ?? '';
                            const gross = getProperty(emp, 'grossAmount', 'GrossAmount');
                            const deduction = getProperty(emp, 'deductionAmount', 'DeductionAmount');
                            const amount = getProperty(emp, 'amount', 'Amount');
                            const deductionDetails = buildDeductionDetails(getProperty(emp, 'deductions', 'Deductions'));
                            html += `<tr><td>${escapeHtml(name)}</td><td>${escapeHtml(title)}</td><td class="text-end">${formatCurrency(gross)}</td><td class="text-end">${formatCurrency(deduction)}</td><td>${deductionDetails}</td><td class="text-end">${formatCurrency(amount)}</td></tr>`;
                        });
                        html += '</tbody></table>';
                        detailsContent.innerHTML = html;
                        detailsModal.show();
                    });
                });

                historyTable.querySelectorAll('.confirm-batch').forEach(btn => {
                    btn.addEventListener('click', async function () {
                        const id = parseInt(this.getAttribute('data-id') ?? '', 10);
                        if (Number.isNaN(id)) {
                            return;
                        }
                        if (!confirm('هل تريد اعتماد هذه الدفعة؟')) {
                            return;
                        }

                        toggleOverlay(true);
                        try {
                            const response = await fetch('@Url.Action("ConfirmBatch")', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': antiForgery
                                },
                                body: JSON.stringify({ batchId: id })
                            });

                            const result = await response.json();
                            const success = getProperty(result, 'success', 'Success');
                            const isSuccess = success === true || success === 'true';
                            if (!response.ok || !isSuccess) {
                                const message = getProperty(result, 'message', 'Message');
                                alert(message || 'حدث خطأ أثناء تأكيد الدفعة');
                                return;
                            }

                            const journalsRaw = getProperty(result, 'journals', 'Journals');
                            const journals = Array.isArray(journalsRaw)
                                ? journalsRaw
                                : (journalsRaw ? [journalsRaw] : []);
                            alert('تم تأكيد تنزيل الرواتب بنجاح. أرقام القيود: ' + journals.join(', '));
                            window.location.reload();
                        } finally {
                            toggleOverlay(false);
                        }
                    });
                });

                historyTable.querySelectorAll('.delete-batch').forEach(btn => {
                    btn.addEventListener('click', async function () {
                        const id = parseInt(this.getAttribute('data-id') ?? '', 10);
                        if (Number.isNaN(id)) {
                            return;
                        }
                        if (!confirm('هل تريد حذف هذه الدفعة؟')) {
                            return;
                        }

                        toggleOverlay(true);
                        try {
                            const response = await fetch('@Url.Action("DeleteBatch")', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': antiForgery
                                },
                                body: JSON.stringify({ batchId: id })
                            });

                            const result = await response.json().catch(() => ({}));
                            const success = getProperty(result, 'success', 'Success');
                            const isSuccess = success === true || success === 'true';
                            if (!response.ok || !isSuccess) {
                                const message = getProperty(result, 'message', 'Message');
                                alert(message || 'حدث خطأ أثناء حذف الدفعة');
                                return;
                            }

                            alert('تم حذف الدفعة بنجاح.');
                            window.location.reload();
                        } finally {
                            toggleOverlay(false);
                        }
                    });
                });
            }

            if (branchSelect.value) {
                loadMonths();
                loadEmployees();
            }

            attachHistoryActions();
        });
    </script>
}
