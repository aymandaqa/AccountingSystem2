@model IEnumerable<AccountingSystem.Models.CashBoxClosure>
@using System.Linq
@{
    ViewData["Title"] = "طلبات إغلاق الصندوق";
    var breakdowns = ViewBag.CashClosureBreakdowns as Dictionary<int, Dictionary<int, int>> ?? new();
    var unitNames = ViewBag.CashClosureUnitNames as Dictionary<int, string> ?? new();
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">طلبات إغلاق الصندوق</h5>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="position-relative">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>المستخدم</th>
                            <th>الحساب</th>
                            <th>الفرع</th>
                            <th>المبلغ المعدود</th>
                            <th>تفاصيل الفئات</th>
                            <th>الرصيد</th>
                            <th>الفرق</th>
                            <th>التاريخ</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            var diff = item.CountedAmount - item.Account.CurrentBalance;
                            <tr>
                                <td>@item.User?.FullName</td>
                                <td>@item.Account?.NameAr</td>
                                <td>@item.Branch?.NameAr</td>
                                <td>@item.CountedAmount.ToString("N2")</td>
                                <td>
                                    @if (breakdowns.TryGetValue(item.Id, out var units) && units.Any())
                                    {
                                        <ul class="mb-0 small">
                                            @foreach (var entry in units.OrderByDescending(kvp => kvp.Key))
                                            {
                                                var label = unitNames.TryGetValue(entry.Key, out var name) ? name : $"فئة رقم {entry.Key}";
                                                <li>@label: @entry.Value</li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>@item.Account.CurrentBalance.ToString("N2")</td>
                                <td class="@(diff == 0 ? "text-success" : "text-danger")">@diff.ToString("N2")</td>
                                <td>@item.CreatedAt.ToString("yyyy/MM/dd HH:mm")</td>
                                <td>
                                    <form asp-action="Approve" method="post" class="d-inline action-form" asp-require-permission="cashclosures.approve" data-item-id="@item.Id">
                                        <input type="hidden" name="id" value="@item.Id" />
                                        <input type="hidden" name="matched" value="true" />
                                        <button type="submit" class="btn btn-success btn-sm">موافقة مطابقة</button>
                                    </form>
                                    <form asp-action="Approve" method="post" class="d-inline mt-1 action-form" asp-require-permission="cashclosures.approve" data-item-id="@item.Id" data-requires-reason="true">
                                        <input type="hidden" name="id" value="@item.Id" />
                                        <input type="hidden" name="matched" value="false" />
                                        <input type="hidden" name="reason" />
                                        <button type="submit" class="btn btn-warning btn-sm">موافقة مع فرق</button>
                                    </form>
                                    <form asp-action="Reject" method="post" class="d-inline mt-1 action-form" asp-require-permission="cashclosures.approve" data-item-id="@item.Id" data-requires-reason="true">
                                        <input type="hidden" name="id" value="@item.Id" />
                                        <input type="hidden" name="reason" />
                                        <button type="submit" class="btn btn-danger btn-sm">رفض</button>
                                    </form>
                                    <div class="mt-2">
                                        <label class="form-label small mb-1" for="reason-@item.Id">سبب الرفض / الفروقات</label>
                                        <textarea id="reason-@item.Id" class="form-control form-control-sm reason-input" data-item-id="@item.Id" placeholder="أدخل السبب هنا"></textarea>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="loading-overlay d-none" id="action-loading">
                    <div class="spinner-border text-light" role="status">
                        <span class="visually-hidden">جاري المعالجة...</span>
                    </div>
                </div>
                </div>
            }
            else
            {
                <div class="alert alert-info text-center">لا توجد طلبات حالية</div>
            }
        </div>
    </div>
</div>

<style>
    .loading-overlay {
        position: absolute;
        inset: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgba(0, 0, 0, 0.35);
        z-index: 10;
    }
</style>

@section Scripts {
    <script>
        (function () {
            const overlay = document.getElementById('action-loading');
            const forms = document.querySelectorAll('.action-form');

            function showLoading() {
                overlay?.classList.remove('d-none');
            }

            forms.forEach(form => {
                form.addEventListener('submit', function (event) {
                    const itemId = this.dataset.itemId;
                    const reasonInput = document.querySelector(`.reason-input[data-item-id="${itemId}"]`);
                    const requiresReason = this.dataset.requiresReason === 'true';
                    const hiddenReason = this.querySelector('input[name="reason"]');

                    if (requiresReason) {
                        const value = reasonInput?.value.trim();
                        if (!value) {
                            event.preventDefault();
                            reasonInput?.classList.add('is-invalid');
                            reasonInput?.focus();
                            return;
                        }
                        reasonInput?.classList.remove('is-invalid');
                        if (hiddenReason) {
                            hiddenReason.value = value;
                        }
                    } else if (hiddenReason && reasonInput) {
                        hiddenReason.value = reasonInput.value.trim();
                    }

                    showLoading();
                    this.querySelectorAll('button[type="submit"]').forEach(btn => btn.disabled = true);
                });
            });

            document.querySelectorAll('.reason-input').forEach(textarea => {
                textarea.addEventListener('input', function () {
                    if (this.value.trim()) {
                        this.classList.remove('is-invalid');
                    }
                });
            });
        })();
    </script>
}
