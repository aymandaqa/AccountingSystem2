@model AccountingSystem.ViewModels.CashBoxClosureCreateViewModel
@using System.Text.Json
@{
    ViewData["Title"] = "إغلاق الصندوق";
    var jsonOptions = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
    var currencyUnitsJson = JsonSerializer.Serialize(Model.CurrencyUnits, jsonOptions);
    var currencyUnitCountsJson = JsonSerializer.Serialize(Model.CurrencyUnitCounts, jsonOptions);
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">إغلاق الصندوق</h5>
        </div>
        <div class="card-body">
            <form method="get" asp-action="Create">
                <div class="mb-3">
                    <label class="form-label">الحساب</label>
                    <select asp-for="AccountId" class="form-select" id="accountSelect" onchange="this.form.submit()">
                        @foreach (var account in Model.AccountOptions)
                        {
                            <option value="@account.AccountId"
                                    data-currency-id="@account.CurrencyId"
                                    data-currency-code="@account.CurrencyCode"
                                    selected="@account.Selected">@account.DisplayName</option>
                        }
                    </select>
                    <span asp-validation-for="AccountId" class="text-danger"></span>
                </div>
            </form>
            <div class="mb-3">
                <label class="form-label">الفرع</label>
                <input type="text" class="form-control" value="@Model.BranchName" readonly />
            </div>
            <div class="mb-3">
                <label class="form-label">الرصيد الافتتاحي</label>
                <input asp-for="OpeningBalance" class="form-control" readonly asp-format="{0:N2}" />
            </div>
            <div class="mb-3" style="display:none">
                <label class="form-label">حركات اليوم</label>
                <input asp-for="TodayTransactions" class="form-control" readonly asp-format="{0:N2}" />
            </div>
            <div class="mb-3" style="display:none">
                <label class="form-label">الرصيد التراكمي</label>
                <input asp-for="CumulativeBalance" class="form-control" readonly asp-format="{0:N2}" />
            </div>
            <form asp-action="Create" method="post">
                <input type="hidden" asp-for="AccountId" />
                <div class="mb-3 d-none" id="currencyUnitsSection">
                    <label class="form-label">تفاصيل الفئات <span class="text-muted">@(!string.IsNullOrEmpty(Model.CurrencyCode) ? $"({Model.CurrencyCode})" : string.Empty)</span></label>
                    <div id="currencyUnitsInputs" class="row g-2"></div>
                    <div id="currencyUnitsEmptyMessage" class="text-muted small d-none">لا توجد فئات معرفة لهذه العملة.</div>
                </div>
                <div class="mb-3">
                    <label asp-for="CountedAmount" class="form-label"></label>
                    <input asp-for="CountedAmount" class="form-control" />
                    <span asp-validation-for="CountedAmount" class="text-danger"></span>
                </div>
                <div class="mb-3" style="display:none">
                    <label class="form-label">الفرق</label>
                    <input id="difference" type="text" class="form-control" readonly />
                </div>
                <div class="mb-3">
                    <label asp-for="Notes" class="form-label"></label>
                    <textarea asp-for="Notes" class="form-control"></textarea>
                </div>
                <button type="submit" class="btn btn-primary">حفظ</button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const countedInput = document.getElementById('CountedAmount');
        const diffInput = document.getElementById('difference');
        const expected = @Model.TodayTransactions;
        const currencyUnits = @Html.Raw(currencyUnitsJson);
        let initialUnitCounts = @Html.Raw(currencyUnitCountsJson);
        const currencyUnitsSection = document.getElementById('currencyUnitsSection');
        const currencyUnitsInputs = document.getElementById('currencyUnitsInputs');
        const currencyUnitsEmptyMessage = document.getElementById('currencyUnitsEmptyMessage');
        const selectedCurrencyId = @Model.CurrencyId;

        function updateDiff() {
            const counted = parseFloat(countedInput.value) || 0;
            diffInput.value = (counted - expected).toFixed(2);
        }

        function updateAmountFromUnits() {
            const unitInputs = currencyUnitsInputs ? currencyUnitsInputs.querySelectorAll('.currency-unit-input') : [];
            if (!unitInputs.length) {
                countedInput.readOnly = false;
                return;
            }

            let total = 0;
            unitInputs.forEach(input => {
                const count = Number(input.value);
                const unitValue = Number(input.dataset.value);
                if (!Number.isNaN(count) && !Number.isNaN(unitValue)) {
                    total += count * unitValue;
                }
            });

            countedInput.value = total.toFixed(2);
            updateDiff();
        }

        function renderCurrencyUnits(currencyId) {
            if (!currencyUnitsSection || !currencyUnitsInputs) {
                return;
            }

            currencyUnitsInputs.innerHTML = '';

            const units = currencyUnits[currencyId] || [];

            if (!units.length) {
                currencyUnitsSection.classList.remove('d-none');
                currencyUnitsEmptyMessage.classList.remove('d-none');
                countedInput.readOnly = false;
                initialUnitCounts = [];
                return;
            }

            const countMap = new Map((initialUnitCounts || []).map(c => [c.currencyUnitId, c.count]));
            currencyUnitsEmptyMessage.classList.add('d-none');
            currencyUnitsSection.classList.remove('d-none');
            countedInput.readOnly = true;

            let index = 0;
            units.forEach(unit => {
                const wrapper = document.createElement('div');
                wrapper.className = 'col-md-4';

                const inputGroup = document.createElement('div');
                inputGroup.className = 'input-group';

                const span = document.createElement('span');
                span.className = 'input-group-text';
                span.textContent = unit.name;

                const input = document.createElement('input');
                input.type = 'number';
                input.min = '0';
                input.step = '1';
                input.className = 'form-control currency-unit-input';
                input.placeholder = 'عدد الوحدات';
                input.dataset.value = unit.valueInBaseUnit;
                input.name = `CurrencyUnitCounts[${index}].Count`;
                const hiddenIdInput = document.createElement('input');
                hiddenIdInput.type = 'hidden';
                hiddenIdInput.name = `CurrencyUnitCounts[${index}].CurrencyUnitId`;
                hiddenIdInput.value = unit.currencyUnitId;
                const existingCount = countMap.has(unit.currencyUnitId) ? countMap.get(unit.currencyUnitId) : '';
                input.value = existingCount !== '' ? existingCount : 0;
                input.addEventListener('input', updateAmountFromUnits);

                inputGroup.appendChild(span);
                inputGroup.appendChild(hiddenIdInput);
                inputGroup.appendChild(input);
                wrapper.appendChild(inputGroup);
                currencyUnitsInputs.appendChild(wrapper);
                index += 1;
            });

            initialUnitCounts = [];
            updateAmountFromUnits();
        }

        countedInput.addEventListener('input', updateDiff);
        if (currencyUnitsSection) {
            renderCurrencyUnits(selectedCurrencyId);
        }
        updateDiff();
    </script>
}
