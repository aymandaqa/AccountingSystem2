@model AccountingSystem.ViewModels.ManageUserPermissionsViewModel
@using System.Linq
@{
    ViewData["Title"] = "صلاحيات المستخدم";
    var groupedPermissions = Model.Permissions
        .Select((permission, index) => new { Permission = permission, Index = index })
        .GroupBy(x => x.Permission.Category)
        .OrderBy(group => group.Key)
        .ToList();
}

<div class="row justify-content-center">
    <div class="col-12 col-lg-10 col-xl-9">
        <form asp-action="ManagePermissions" method="post" class="mb-4">
            <input type="hidden" asp-for="UserId" />
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white py-3">
                    <div class="d-flex flex-column flex-md-row align-items-md-center justify-content-between gap-3">
                        <div>
                            <h1 class="h4 mb-1">صلاحيات المستخدم</h1>
                            <p class="text-muted mb-0">@Model.UserName</p>
                        </div>
                        <span class="badge bg-light text-primary border fw-semibold px-3 py-2">
                            إجمالي الصلاحيات: @Model.Permissions.Count
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <h2 class="h5 fw-semibold mb-3">مجموعات الصلاحيات</h2>
                        @if (Model.Groups.Any())
                        {
                            <div class="row g-3">
                                @for (int i = 0; i < Model.Groups.Count; i++)
                                {
                                    var group = Model.Groups[i];
                                    var permissionIds = string.Join(',', group.PermissionIds);
                                    <div class="col-md-6">
                                        <div class="form-check border rounded p-3 h-100 shadow-sm permission-group-option" data-permission-ids="@permissionIds">
                                            <input asp-for="Groups[i].IsAssigned" class="form-check-input me-2" />
                                            <input asp-for="Groups[i].PermissionGroupId" type="hidden" />
                                            <label class="form-check-label fw-semibold" asp-for="Groups[i].IsAssigned">@group.Name</label>
                                            <div class="text-muted small mt-1">
                                                @if (!string.IsNullOrWhiteSpace(group.Description))
                                                {
                                                    @group.Description
                                                }
                                                else
                                                {
                                                    <span class="text-muted">لا يوجد وصف</span>
                                                }
                                            </div>
                                            <div class="mt-2">
                                                <span class="badge bg-info text-dark"><i class="fas fa-key ms-1"></i>@group.PermissionsCount صلاحية</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-light border mb-0" role="status">
                                لا توجد مجموعات صلاحيات متاحة حالياً.
                            </div>
                        }
                    </div>

                    <div class="mb-4">
                        <label for="permissionSearch" class="form-label fw-semibold">ابحث في الصلاحيات</label>
                        <div class="input-group">
                            <span class="input-group-text bg-white"><i class="fas fa-search"></i></span>
                            <input type="search" id="permissionSearch" class="form-control" placeholder="ابحث باسم الصلاحية أو الفئة" autocomplete="off" />
                        </div>
                    </div>

                    <div class="accordion" id="permissionAccordion">
                        @for (int categoryIndex = 0; categoryIndex < groupedPermissions.Count; categoryIndex++)
                        {
                            var categoryGroup = groupedPermissions[categoryIndex];
                            var collapseId = $"permissionCategory{categoryIndex}";
                            var headingId = $"permissionHeading{categoryIndex}";
                            <div class="accordion-item permission-category mb-2" data-category-name="@categoryGroup.Key.ToLowerInvariant()">
                                <h2 class="accordion-header" id="@headingId">
                                    <button class="accordion-button @((categoryIndex == 0) ? string.Empty : "collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="@(categoryIndex == 0 ? "true" : "false")" aria-controls="@collapseId">
                                        <span class="fw-semibold">@categoryGroup.Key</span>
                                        <span class="badge bg-secondary ms-3 permission-count">@categoryGroup.Count()</span>
                                    </button>
                                </h2>
                                <div id="@collapseId" class="accordion-collapse collapse @((categoryIndex == 0) ? "show" : string.Empty)" aria-labelledby="@headingId" data-bs-parent="#permissionAccordion">
                                    <div class="accordion-body">
                                        <div class="row g-3">
                                            @foreach (var entry in categoryGroup)
                                            {
                                                var permission = entry.Permission;
                                                var index = entry.Index;
                                                var searchData = $"{permission.DisplayName} {permission.Category}".ToLowerInvariant();
                                                <div class="col-sm-6 permission-item" data-permission-text="@searchData" data-permission-id="@permission.PermissionId">
                                                    <div class="form-check rounded border p-3 h-100 shadow-sm">
                                                        <input asp-for="Permissions[index].IsGranted" class="form-check-input me-2" data-inherited="@permission.IsInherited.ToString().ToLowerInvariant()" data-direct="@permission.HasDirectGrant.ToString().ToLowerInvariant()" />
                                                        <input asp-for="Permissions[index].PermissionId" type="hidden" />
                                                        <input asp-for="Permissions[index].DisplayName" type="hidden" />
                                                        <input asp-for="Permissions[index].Category" type="hidden" />
                                                        <label class="form-check-label fw-semibold" asp-for="Permissions[index].IsGranted">@permission.DisplayName</label>
                                                        <span class="badge bg-success ms-2 inherited-badge @(permission.IsInherited ? string.Empty : "d-none")">موروثة من مجموعة</span>
                                                        <div class="text-muted small mt-1">ضمن فئة: @permission.Category</div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <div id="noResultsMessage" class="alert alert-light border d-none text-center mt-4" role="status">
                        لا توجد صلاحيات مطابقة لبحثك.
                    </div>
                </div>
                <div class="card-footer bg-white d-flex flex-column flex-sm-row gap-2 justify-content-end">
                    <button type="submit" class="btn btn-primary"><i class="fas fa-save ms-1"></i> حفظ</button>
                    <a asp-action="Index" class="btn btn-outline-secondary">عودة</a>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('permissionSearch');
            const categories = Array.from(document.querySelectorAll('.permission-category'));
            const noResultsMessage = document.getElementById('noResultsMessage');
            const groupOptions = Array.from(document.querySelectorAll('.permission-group-option input[type="checkbox"]'));
            const permissionItems = Array.from(document.querySelectorAll('.permission-item'));

            const permissionMap = new Map();
            permissionItems.forEach(item => {
                const permissionId = item.dataset.permissionId;
                if (!permissionId) {
                    return;
                }

                const checkbox = item.querySelector('input[type="checkbox"]');
                const badge = item.querySelector('.inherited-badge');
                if (checkbox) {
                    const isInitiallyInherited = checkbox.dataset.inherited === 'true';
                    const hasDirectGrant = checkbox.dataset.direct === 'true';
                    checkbox.dataset.manual = (hasDirectGrant || (!isInitiallyInherited && checkbox.checked)) ? 'true' : 'false';
                    checkbox.dataset.touched = 'false';

                    checkbox.addEventListener('change', function () {
                        this.dataset.touched = 'true';
                        if (this.dataset.inherited === 'true') {
                            this.checked = true;
                            this.dataset.manual = 'false';
                            return;
                        }

                        this.dataset.manual = this.checked ? 'true' : 'false';
                    });
                }

                permissionMap.set(permissionId, { checkbox, badge });
            });

            function parsePermissionIds(element) {
                const container = element.closest('.permission-group-option');
                if (!container) {
                    return [];
                }

                const ids = (container.dataset.permissionIds || '').split(',');
                return ids.map(id => id.trim()).filter(Boolean);
            }

            function updateInheritedFromGroups() {
                const inherited = new Set();

                groupOptions.forEach(option => {
                    if (option.checked) {
                        parsePermissionIds(option).forEach(id => inherited.add(id));
                    }
                });

                permissionMap.forEach((value, permissionId) => {
                    const isInherited = inherited.has(permissionId);
                    if (value.checkbox) {
                        const wasInherited = value.checkbox.dataset.inherited === 'true';
                        value.checkbox.dataset.inherited = isInherited ? 'true' : 'false';

                        if (isInherited) {
                            value.checkbox.checked = true;
                            if (value.checkbox.dataset.manual !== 'true') {
                                value.checkbox.dataset.manual = 'false';
                            }
                        } else {
                            const touched = value.checkbox.dataset.touched === 'true';
                            const isManual = value.checkbox.dataset.manual === 'true';

                            if (isManual) {
                                value.checkbox.checked = true;
                            } else if (touched) {
                                value.checkbox.checked = false;
                            } else if (wasInherited) {
                                value.checkbox.checked = true;
                                value.checkbox.dataset.manual = 'true';
                            } else {
                                value.checkbox.checked = false;
                                value.checkbox.dataset.manual = 'false';
                            }
                        }
                    }
                    if (value.badge) {
                        value.badge.classList.toggle('d-none', !isInherited);
                    }
                });
            }

            function updateFilter() {
                const query = (searchInput.value || '').trim().toLowerCase();
                let anyVisible = false;

                categories.forEach(category => {
                    const categoryName = (category.dataset.categoryName || '').toLowerCase();
                    const items = Array.from(category.querySelectorAll('.permission-item'));
                    let visibleCount = 0;

                    items.forEach(item => {
                        const text = (item.dataset.permissionText || '').toLowerCase();
                        const matches = !query || text.includes(query) || categoryName.includes(query);

                        if (matches) {
                            item.classList.remove('d-none');
                            visibleCount++;
                        } else {
                            item.classList.add('d-none');
                        }
                    });

                    const badge = category.querySelector('.permission-count');
                    if (badge) {
                        badge.textContent = visibleCount;
                    }

                    if (visibleCount > 0) {
                        category.classList.remove('d-none');
                        anyVisible = true;
                    } else {
                        category.classList.add('d-none');
                    }
                });

                if (noResultsMessage) {
                    noResultsMessage.classList.toggle('d-none', anyVisible);
                }
            }

            if (searchInput) {
                searchInput.addEventListener('input', updateFilter);
                updateFilter();
            }

            groupOptions.forEach(option => {
                option.addEventListener('change', updateInheritedFromGroups);
            });

            updateInheritedFromGroups();
        });
    </script>
}
