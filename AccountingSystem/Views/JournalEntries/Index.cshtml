@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@model AccountingSystem.ViewModels.JournalEntriesIndexViewModel

@inject IAuthorizationService AuthorizationService

@{
    ViewData["Title"] = "القيود المالية";
    var canEdit = (await AuthorizationService.AuthorizeAsync(User, "journal.edit")).Succeeded;
    var canApprove = (await AuthorizationService.AuthorizeAsync(User, "journal.approve")).Succeeded;
    var canDelete = (await AuthorizationService.AuthorizeAsync(User, "journal.delete")).Succeeded;
    var endpoints = new
    {
        data = Url.Action("UrlDatasourceJournalEntries", "JournalEntries"),
        summary = Url.Action("Summary", "JournalEntries"),
        post = Url.Action("Post", "JournalEntries"),
        delete = Url.Action("Delete", "JournalEntries"),
        details = Url.Action("Details", "JournalEntries"),
        edit = Url.Action("Edit", "JournalEntries"),
        print = Url.Action("Print", "JournalEntries")
    };
    var endpointsJson = JsonSerializer.Serialize(endpoints);
    var permissionsJson = JsonSerializer.Serialize(new
    {
        canEdit,
        canApprove,
        canDelete
    });
}

@section Styles {
    <style>
        :root {
            color-scheme: light;
        }

        .journal-index {
            padding-inline: clamp(0.75rem, 1vw, 2rem);
            padding-block: 1.25rem 2rem;
            min-height: 100vh;
        }

        @@supports (height: 100dvh) {
            .journal-index {
                min-height: 100dvh;
            }
        }

        .journal-shell {
            border: none;
            border-radius: 1rem;
            overflow: hidden;
        }

            .journal-shell .card-header {
                background: linear-gradient(135deg, rgba(13, 110, 253, 0.12), rgba(13, 110, 253, 0.03));
                border-bottom: none;
                padding: clamp(1.25rem, 2vw, 1.75rem);
            }

        @@supports not (height: 100dvh) {
            .journal-entries-card {
                min-height: calc(100vh - 5.5rem);
            }
        }

        @@media (min-width: 992px) {
            .journal-shell .headline {
                grid-template-columns: minmax(0, 1fr) auto;
                align-items: center;
            }
        }

        .headline__title {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

            .headline__title h3 {
                display: flex;
                align-items: center;
                gap: 0.6rem;
                font-size: clamp(1.35rem, 2vw, 1.7rem);
                color: #0b4d94;
                margin: 0;
            }

            .headline__title p {
                margin: 0;
                color: #4f5d75;
                max-width: 48ch;
            }

        .headline__actions {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
            align-items: center;
            justify-content: flex-start;
        }

        .search-shell {
            flex: 1 1 clamp(16rem, 28vw, 24rem);
            min-width: 14rem;
            position: relative;
        }

        .journal-entries-card .quick-search .input-group-text {
            background-color: #f1f3f5;
            border-inline-end: 0;
        }

        .journal-entries-card .quick-search .form-control {
            border-inline-start: 0;
            box-shadow: none;
        }

        .journal-entries-card .quick-search .btn-clear-search {
            border-radius: 0 var(--bs-border-radius) var(--bs-border-radius) 0;
        }

        .headline__actions .btn-refresh {
            position: relative;
        }

        .summary-section {
            margin-top: 1.75rem;
            display: grid;
            gap: 0.85rem;
        }

        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(14.5rem, 1fr));
            gap: 0.85rem;
        }

        .summary-card {
            border-radius: 0.9rem;
            border: 1px solid rgba(13, 110, 253, 0.18);
            background: linear-gradient(135deg, rgba(13, 110, 253, 0.1), rgba(13, 110, 253, 0.02));
            padding: 1rem 1.25rem;
            display: flex;
            flex-direction: column;
            gap: 0.35rem;
            min-height: 6.5rem;
        }

        .summary-card__label {
            font-size: 0.85rem;
            color: #1f3b5b;
            font-weight: 600;
        }

        .summary-card__value {
            font-size: clamp(1.35rem, 2.2vw, 1.9rem);
            font-weight: 700;
            color: #0b4d94;
        }

        .summary-card__hint {
            font-size: 0.8rem;
            color: #4f5d75;
        }

        .summary-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
            align-items: center;
            color: #6c757d;
            font-size: 0.85rem;
        }

        .insights-panel {
            border-radius: 0.75rem;
            border: 1px dashed rgba(13, 110, 253, 0.35);
            background-color: #f8f9ff;
            padding: 1rem 1.25rem;
        }

        .filters-shell .filters-toolbar {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
            align-items: center;
        }

            .filters-shell .filters-toolbar .btn-toggle {
                display: inline-flex;
                align-items: center;
                gap: 0.35rem;
                font-weight: 600;
            }

            .filters-shell .filters-toolbar .active-filters-count {
                background-color: #0b4d94;
                color: #fff;
                border-radius: 999px;
                padding: 0.15rem 0.6rem;
                font-size: 0.75rem;
                font-weight: 600;
            }

        .filters-shell .active-filters {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.85rem;
        }

        .filters-shell .filter-chip {
            display: inline-flex;
            align-items: center;
            gap: 0.35rem;
            padding: 0.35rem 0.75rem;
            background-color: #e7f1ff;
            border-radius: 999px;
            border: 1px solid rgba(15, 67, 130, 0.15);
            font-size: 0.8rem;
            font-weight: 600;
            color: #0b4d94;
        }

            .filters-shell .filter-chip button {
                border: none;
                background: transparent;
                color: inherit;
                display: inline-flex;
                align-items: center;
                padding: 0;
                font-size: 0.85rem;
            }

        .filters-shell .collapse.show {
            margin-top: 1rem;
        }

        .filters-shell form .form-label {
            font-weight: 600;
            color: #1f3b5b;
        }

        .filters-shell form .form-select,
        .filters-shell form .form-control {
            box-shadow: none;
        }

        .filters-shell .form-switch .form-check-input {
            width: 2.5rem;
            height: 1.25rem;
        }

        .filters-shell .form-switch .form-check-label {
            font-weight: 600;
            color: #1f3b5b;
        }

        .grid-wrapper {
            background-color: #fff;
            border: 1px solid rgba(15, 67, 130, 0.08);
            border-radius: 0.85rem;
            padding: 0.75rem;
            min-height: 24rem;
            position: relative;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .grid-caption {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 0.5rem;
            gap: 0.75rem;
        }

            .grid-caption .result-info {
                font-size: 0.85rem;
                color: #4f5d75;
            }

            .grid-caption .badge {
                font-size: 0.75rem;
            }

            .grid-caption .form-select {
                min-width: 6rem;
            }

        .result-meta {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .grid-table {
            position: relative;
            border-radius: 0.75rem;
            overflow: hidden;
            border: 1px solid rgba(15, 67, 130, 0.08);
        }

            .grid-table table {
                margin-bottom: 0;
            }

            .grid-table thead th {
                background-color: #f8f9ff;
                font-weight: 700;
                vertical-align: middle;
                border-bottom-width: 1px;
            }

            .grid-table tbody tr.unbalanced-entry {
                background-color: #fdeaea;
            }

                .grid-table tbody tr.unbalanced-entry td {
                    color: #b71c1c;
                }

            .grid-table tbody tr:hover {
                background-color: #f6f9ff;
            }

        .sortable {
            cursor: pointer;
            user-select: none;
            white-space: nowrap;
        }

            .sortable .sort-indicator {
                display: inline-flex;
                align-items: center;
                margin-inline-start: 0.35rem;
                color: #6c757d;
                font-size: 0.8rem;
            }

            .sortable.active {
                color: #0b4d94;
            }

        .table-actions {
            min-width: 12rem;
        }

            .table-actions .btn {
                min-width: 2.25rem;
                font-size: 0.85rem;
            }

                .table-actions .btn i {
                    pointer-events: none;
                }

        .loading-overlay {
            position: absolute;
            inset: 0;
            background-color: rgba(255, 255, 255, 0.85);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
            z-index: 2;
            font-weight: 600;
            color: #0b4d94;
        }

        .empty-state {
            padding: 2rem 1rem;
            text-align: center;
            border: 1px dashed rgba(13, 110, 253, 0.2);
            border-radius: 0.75rem;
            color: #4f5d75;
            background-color: #f8faff;
        }

        .group-header-row td {
            background-color: #eef4ff;
            color: #0b4d94;
            font-weight: 700;
        }

        @@media (max-width: 767.98px) {
            .journal-index {
                padding-inline: 0.5rem;
                padding-block: 1rem 1.5rem;
            }

            .summary-grid {
                grid-template-columns: repeat(auto-fill, minmax(12rem, 1fr));
            }

            .filters-card {
                padding: 0.85rem;
            }

            .grid-wrapper {
                padding: 0.5rem;
            }
        }
    </style>
}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="journal-index container-fluid">
                <div class="card journal-shell shadow-sm">
                    <div class="card-header">
                        <div class="headline">
                            <div class="headline__title">
                                <h3>
                                    <i class="fas fa-file-invoice"></i>
                                    <span>القيود المالية</span>
                                </h3>
                                <p>
                                    إدارة القيود بسهولة، مع نظرة فورية على التوازن والفلترة الذكية عبر جميع الحقول.
                                </p>
                            </div>
                            <div class="headline__actions">
                                <div class="search-shell">
                                    <label class="visually-hidden" for="quickSearch">بحث سريع</label>
                                    <div class="input-group" role="search">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input type="search" id="quickSearch" class="form-control" placeholder="بحث سريع في جميع الأعمدة" aria-label="بحث سريع" />
                                        <button type="button" id="clearQuickSearch" class="btn btn-outline-secondary btn-clear-search" title="مسح البحث">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                                <button type="button" class="btn btn-outline-primary btn-refresh" id="refreshGrid" title="تحديث القائمة">
                                    <i class="fas fa-sync-alt"></i>
                                    <span class="d-none d-lg-inline">تحديث</span>
                                </button>
                                <a asp-action="Create" class="btn btn-primary" asp-require-permission="journal.create">
                                    <i class="fas fa-plus me-1"></i>
                                    إضافة قيد جديد
                                </a>
                            </div>
                        </div>
                        <div class="summary-section" aria-live="polite">
                            <div class="summary-grid">
                                <div class="summary-card">
                                    <span class="summary-card__label">إجمالي القيود</span>
                                    <span class="summary-card__value" id="summaryTotal">0</span>
                                    <span class="summary-card__hint" id="summaryTotalStatus">—</span>
                                </div>
                                <div class="summary-card">
                                    <span class="summary-card__label">القيود غير المتوازنة</span>
                                    <span class="summary-card__value text-danger" id="summaryUnbalanced">0</span>
                                    <span class="summary-card__hint">تنبيه لأي فروقات بين المدين والدائن</span>
                                </div>
                                <div class="summary-card">
                                    <span class="summary-card__label">إجمالي المدين</span>
                                    <span class="summary-card__value" id="summaryDebit">0</span>
                                    <span class="summary-card__hint">المبالغ الإجمالية (مدين)</span>
                                </div>
                                <div class="summary-card">
                                    <span class="summary-card__label">إجمالي الدائن</span>
                                    <span class="summary-card__value" id="summaryCredit">0</span>
                                    <span class="summary-card__hint">المبالغ الإجمالية (دائن)</span>
                                </div>
                                <div class="summary-card">
                                    <span class="summary-card__label">نسبة التوازن</span>
                                    <span class="summary-card__value" id="summaryBalanceRatio">0%</span>
                                    <span class="summary-card__hint">قيود متوازنة من إجمالي القيود</span>
                                </div>
                            </div>
                            <div class="summary-meta">
                                <span><i class="fas fa-info-circle"></i> <span id="summaryInsight">لا توجد بيانات حتى الآن.</span></span>
                                <span><i class="fas fa-clock"></i> آخر تحديث: <span id="lastRefreshAt">—</span></span>
                            </div>
                            <div class="insights-panel" id="insightsPanel" hidden>
                                <strong>اقتراحات محسّنة:</strong>
                                <ul class="mb-0" id="smartSuggestions"></ul>
                            </div>
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column gap-3">
                        <div class="filters-shell">
                            <div class="filters-toolbar">
                                <button class="btn btn-outline-secondary btn-toggle" type="button" data-bs-toggle="collapse" data-bs-target="#filtersCollapse" aria-expanded="true" aria-controls="filtersCollapse">
                                    <i class="fas fa-sliders-h"></i>
                                    خيارات متقدمة
                                </button>
                                <div class="form-check form-switch ms-auto">
                                    <input class="form-check-input" type="checkbox" role="switch" id="showUnbalancedOnly">
                                    <label class="form-check-label" for="showUnbalancedOnly">عرض القيود غير المتوازنة فقط</label>
                                </div>
                                <span class="active-filters-count d-none" id="activeFiltersCount">0</span>
                                <button type="button" id="resetFilters" class="btn btn-link text-decoration-none text-danger">
                                    <i class="fas fa-undo"></i>
                                    إعادة تعيين
                                </button>
                            </div>
                            <div class="active-filters" id="activeFilters" aria-live="polite"></div>
                            <div class="collapse show" id="filtersCollapse">
                                <form id="filtersForm" class="row g-3 pt-3">
                                    <div class="col-sm-6 col-lg-3">
                                        <label for="fromDate" class="form-label">من تاريخ</label>
                                        <input type="date" id="fromDate" class="form-control" />
                                    </div>
                                    <div class="col-sm-6 col-lg-3">
                                        <label for="toDate" class="form-label">إلى تاريخ</label>
                                        <input type="date" id="toDate" class="form-control" />
                                    </div>
                                    <div class="col-sm-6 col-lg-3">
                                        <label for="branchFilter" class="form-label">الفرع</label>
                                        <select id="branchFilter" class="form-select">
                                            @foreach (var branch in Model.Branches)
                                            {
                                                <option value="@branch.Value">@branch.Text</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-sm-6 col-lg-3">
                                        <label for="statusFilter" class="form-label">الحالة</label>
                                        <select id="statusFilter" class="form-select">
                                            <option value="">جميع الحالات</option>
                                            @foreach (var status in Model.Statuses)
                                            {
                                                <option value="@status.Value">@status.Text</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-sm-6 col-lg-3">
                                        <label for="groupBy" class="form-label">تجميع النتائج</label>
                                        <select id="groupBy" class="form-select">
                                            <option value="" selected>بدون تجميع</option>
                                            <option value="BranchName">حسب الفرع</option>
                                            <option value="StatusDisplay">حسب الحالة</option>
                                            <option value="DateGroup">حسب الشهر</option>
                                            <option value="Reference">حسب المرجع</option>
                                        </select>
                                    </div>
                                </form>
                            </div>
                        </div>

                        <div class="grid-wrapper">
                            <div class="grid-caption">
                                <div class="result-meta">
                                    <i class="fas fa-database text-primary"></i>
                                    <span class="result-info" id="gridResultInfo">لا توجد بيانات بعد</span>
                                </div>
                                <div class="result-meta">
                                    <span class="badge bg-light text-dark" id="groupingInfo" hidden>العرض مجمع</span>
                                    <div class="d-flex align-items-center gap-2">
                                        <label for="pageSize" class="form-label mb-0 small text-muted">عناصر في الصفحة</label>
                                        <select id="pageSize" class="form-select form-select-sm w-auto">
                                            <option value="10">10</option>
                                            <option value="25" selected>25</option>
                                            <option value="50">50</option>
                                            <option value="100">100</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="grid-table">
                                <div id="tableLoadingOverlay" class="loading-overlay" hidden>
                                    <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
                                    <span>جاري تحميل البيانات...</span>
                                </div>
                                <div class="table-responsive">
                                    <table class="table table-hover align-middle mb-0" id="journalEntriesTable">
                                        <thead class="table-light">
                                            <tr>
                                                <th scope="col" class="sortable" data-sort="Number" tabindex="0" aria-sort="none" title="ترتيب">
                                                    رقم القيد
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="sortable" data-sort="Date" tabindex="0" aria-sort="none" title="ترتيب">
                                                    التاريخ
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="sortable" data-sort="Description" tabindex="0" aria-sort="none" title="ترتيب">
                                                    الوصف
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="sortable" data-sort="Reference" tabindex="0" aria-sort="none" title="ترتيب">
                                                    المرجع
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="sortable" data-sort="BranchName" tabindex="0" aria-sort="none" title="ترتيب">
                                                    الفرع
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="sortable" data-sort="CreatedByName" tabindex="0" aria-sort="none" title="ترتيب">
                                                    مدخل القيد
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="text-end sortable" data-sort="TotalDebit" tabindex="0" aria-sort="none" title="ترتيب">
                                                    إجمالي المدين
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="text-end sortable" data-sort="TotalCredit" tabindex="0" aria-sort="none" title="ترتيب">
                                                    إجمالي الدائن
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="text-center sortable" data-sort="LinesCount" tabindex="0" aria-sort="none" title="ترتيب">
                                                    عدد البنود
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="text-center sortable" data-sort="StatusDisplay" tabindex="0" aria-sort="none" title="ترتيب">
                                                    الحالة
                                                    <span class="sort-indicator"><i class="fas fa-sort"></i></span>
                                                </th>
                                                <th scope="col" class="text-center">
                                                    الإجراءات
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody id="journalEntriesBody"></tbody>
                                    </table>
                                </div>
                            </div>
                            <div id="emptyState" class="empty-state" hidden>
                                <i class="fas fa-folder-open fa-2x mb-2 text-primary" aria-hidden="true"></i>
                                <p class="mb-0">لا توجد قيود مطابقة للمعايير الحالية.</p>
                            </div>
                            <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                                <div class="d-flex align-items-center gap-2 small text-muted">
                                    <i class="fas fa-info-circle"></i>
                                    <span>استخدم رؤوس الأعمدة للترتيب أو شريط البحث للتصفية السريعة.</span>
                                </div>
                                <nav id="paginationNav" aria-label="صفحات القيود" class="d-none">
                                    <ul class="pagination pagination-sm mb-0" id="pagination"></ul>
                                </nav>
                            </div>
                        </div>

                        <form id="antiForgeryForm" asp-action="Post" method="post" class="d-none">
                            @Html.AntiForgeryToken()
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const endpoints = @Html.Raw(endpointsJson);
            const permissions = Object.assign({ canEdit: false, canApprove: false, canDelete: false }, @Html.Raw(permissionsJson));
            const storageKey = 'journalEntries.index.filters.v3';

            const dataUrl = endpoints.data;
            const summaryUrl = endpoints.summary;
            const postUrlBase = endpoints.post;
            const deleteUrlBase = endpoints.delete;
            const routes = {
                details: endpoints.details,
                edit: endpoints.edit,
                print: endpoints.print
            };

            const searchInput = document.getElementById('quickSearch');
            const clearSearchButton = document.getElementById('clearQuickSearch');
            const refreshButton = document.getElementById('refreshGrid');
            const unbalancedToggle = document.getElementById('showUnbalancedOnly');
            const activeFiltersContainer = document.getElementById('activeFilters');
            const activeFiltersCount = document.getElementById('activeFiltersCount');
            const resultInfo = document.getElementById('gridResultInfo');
            const groupingInfo = document.getElementById('groupingInfo');
            const lastRefreshAt = document.getElementById('lastRefreshAt');
            const summaryInsight = document.getElementById('summaryInsight');
            const insightsPanel = document.getElementById('insightsPanel');
            const smartSuggestions = document.getElementById('smartSuggestions');
            const groupSelect = document.getElementById('groupBy');
            const pageSizeSelect = document.getElementById('pageSize');
            const pagination = document.getElementById('pagination');
            const paginationNav = document.getElementById('paginationNav');
            const table = document.getElementById('journalEntriesTable');
            const tableBody = document.getElementById('journalEntriesBody');
            const emptyState = document.getElementById('emptyState');
            const loadingOverlay = document.getElementById('tableLoadingOverlay');
            const resetFiltersButton = document.getElementById('resetFilters');

            const antiForgeryInput = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
            const antiForgeryToken = antiForgeryInput ? antiForgeryInput.value : null;

            const summaryFields = {
                total: document.getElementById('summaryTotal'),
                totalStatus: document.getElementById('summaryTotalStatus'),
                unbalanced: document.getElementById('summaryUnbalanced'),
                debit: document.getElementById('summaryDebit'),
                credit: document.getElementById('summaryCredit'),
                ratio: document.getElementById('summaryBalanceRatio')
            };

            const filterControls = {
                fromDate: document.getElementById('fromDate'),
                toDate: document.getElementById('toDate'),
                branchId: document.getElementById('branchFilter'),
                status: document.getElementById('statusFilter'),
                groupBy: groupSelect,
                searchTerm: searchInput
            };

            const groupLabels = {
                BranchName: 'حسب الفرع',
                StatusDisplay: 'حسب الحالة',
                DateGroup: 'حسب الشهر',
                Reference: 'حسب المرجع'
            };

            const state = {
                page: 1,
                pageSize: 25,
                sortField: 'Date',
                sortDir: 'Descending',
                groupBy: '',
                totalCount: 0,
                data: []
            };

            function loadPersistedFilters() {
                try {
                    const stored = localStorage.getItem(storageKey);
                    return stored ? JSON.parse(stored) : null;
                } catch (error) {
                    console.warn('Failed to parse stored filters.', error);
                    return null;
                }
            }

            function persistFilters(values) {
                try {
                    localStorage.setItem(storageKey, JSON.stringify(values));
                } catch (error) {
                    console.warn('Failed to persist filters.', error);
                }
            }

            function clearPersistedFilters() {
                try {
                    localStorage.removeItem(storageKey);
                } catch (error) {
                    console.warn('Failed to clear stored filters.', error);
                }
            }

            function setSelectValue(selectElement, value) {
                if (!selectElement) {
                    return;
                }
                const exists = Array.prototype.some.call(selectElement.options, function (option) {
                    return option.value === value;
                });
                if (exists) {
                    selectElement.value = value;
                } else {
                    selectElement.selectedIndex = 0;
                }
            }

            function applyStoredFilters() {
                const stored = loadPersistedFilters();
                if (!stored) {
                    if (pageSizeSelect) {
                        const defaultSize = parseInt(pageSizeSelect.value, 10);
                        if (!Number.isNaN(defaultSize)) {
                            state.pageSize = defaultSize;
                        }
                    }
                    return;
                }

                if (filterControls.fromDate && stored.fromDate) {
                    filterControls.fromDate.value = stored.fromDate;
                }
                if (filterControls.toDate && stored.toDate) {
                    filterControls.toDate.value = stored.toDate;
                }
                if (filterControls.branchId && typeof stored.branchId === 'string') {
                    setSelectValue(filterControls.branchId, stored.branchId);
                }
                if (filterControls.status && typeof stored.status === 'string') {
                    setSelectValue(filterControls.status, stored.status);
                }
                if (typeof stored.groupBy === 'string' && stored.groupBy) {
                    state.groupBy = stored.groupBy;
                    if (groupSelect) {
                        setSelectValue(groupSelect, stored.groupBy);
                    }
                }
                if (unbalancedToggle && stored.showUnbalancedOnly === true) {
                    unbalancedToggle.checked = true;
                }
                if (filterControls.searchTerm && typeof stored.searchTerm === 'string') {
                    filterControls.searchTerm.value = stored.searchTerm;
                }
                if (typeof stored.pageSize === 'number' && !Number.isNaN(stored.pageSize)) {
                    state.pageSize = stored.pageSize;
                    if (pageSizeSelect) {
                        pageSizeSelect.value = String(stored.pageSize);
                    }
                } else if (pageSizeSelect) {
                    const parsed = parseInt(pageSizeSelect.value, 10);
                    if (!Number.isNaN(parsed)) {
                        state.pageSize = parsed;
                    }
                }
                if (typeof stored.sortField === 'string' && stored.sortField) {
                    state.sortField = stored.sortField;
                }
                if (typeof stored.sortDir === 'string' && stored.sortDir) {
                    state.sortDir = stored.sortDir;
                }
            }

            function getQuickSearchValue() {
                return searchInput ? searchInput.value.trim() : '';
            }

            function updateSearchClearState(value) {
                if (!clearSearchButton) {
                    return;
                }
                const hasValue = value && value.length > 0;
                clearSearchButton.disabled = !hasValue;
            }

            function gatherFilterParameters(searchValue) {
                return {
                    fromDate: filterControls.fromDate ? filterControls.fromDate.value : '',
                    toDate: filterControls.toDate ? filterControls.toDate.value : '',
                    branchId: filterControls.branchId ? filterControls.branchId.value : '',
                    status: filterControls.status ? filterControls.status.value : '',
                    groupBy: state.groupBy || '',
                    showUnbalancedOnly: unbalancedToggle && unbalancedToggle.checked ? 'true' : '',
                    searchTerm: (searchValue || (filterControls.searchTerm ? filterControls.searchTerm.value : '') || '').trim()
                };
            }

            function buildQueryString(params) {
                const query = new URLSearchParams();
                Object.keys(params).forEach(function (key) {
                    const value = params[key];
                    if (value !== undefined && value !== null && value !== '') {
                        query.append(key, value);
                    }
                });
                return query.toString();
            }

            function formatNumber(value) {
                const number = Number(value || 0);
                return number.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 });
            }

            function formatPercentage(value) {
                const number = Number(value || 0);
                return number.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 }) + '%';
            }

            function renderInsightMessage(total, unbalanced, ratio) {
                if (!summaryInsight) {
                    return;
                }
                if (total === 0) {
                    summaryInsight.textContent = 'ابدأ بإضافة القيود لعرض الإحصائيات والتقارير.';
                    return;
                }
                if (unbalanced > 0) {
                    summaryInsight.textContent = 'هناك ' + unbalanced + ' قيود تحتاج إلى مراجعة لتحقيق التوازن.';
                } else if (ratio >= 99) {
                    summaryInsight.textContent = 'أداء ممتاز! جميع القيود الحالية متوازنة.';
                } else {
                    summaryInsight.textContent = 'الغالبية العظمى من القيود متوازنة. استمر في مراقبة الأداء.';
                }
            }

            function renderSmartSuggestions(total, unbalanced, totalDebit, totalCredit) {
                if (!smartSuggestions || !insightsPanel) {
                    return;
                }
                smartSuggestions.innerHTML = '';
                const suggestions = [];
                if (total === 0) {
                    suggestions.push('استخدم زر "إضافة قيد جديد" لبدء إنشاء أول قيد.');
                } else {
                    if (unbalanced > 0) {
                        suggestions.push('قم بتطبيق مرشح "عرض القيود غير المتوازنة" لمراجعة الفروقات مباشرة.');
                    }
                    if (Math.abs(Number(totalDebit || 0) - Number(totalCredit || 0)) > 0.01) {
                        suggestions.push('راجع القيود ذات الفروقات الكبيرة بين المدين والدائن للتأكد من صحة الإدخالات.');
                    }
                    suggestions.push('جرّب تجميع النتائج حسب الفرع أو الحالة للحصول على رؤى أكثر دقة.');
                }
                if (suggestions.length > 0) {
                    suggestions.forEach(function (tip) {
                        const li = document.createElement('li');
                        li.textContent = tip;
                        smartSuggestions.appendChild(li);
                    });
                    insightsPanel.hidden = false;
                } else {
                    insightsPanel.hidden = true;
                }
            }

            function updateSummary(searchValue) {
                if (!summaryUrl) {
                    return;
                }
                const params = gatherFilterParameters(searchValue);
                const queryString = buildQueryString(params);
                const url = summaryUrl + (queryString ? '?' + queryString : '');
                fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                    .then(function (response) {
                        if (!response.ok) {
                            throw new Error('فشل في تحميل الملخص');
                        }
                        return response.json();
                    })
                    .then(function (data) {
                        const totalEntries = Number(data.totalEntries || 0);
                        const unbalancedEntries = Number(data.unbalancedEntries || 0);
                        const balancedRatio = totalEntries > 0 ? ((totalEntries - unbalancedEntries) / totalEntries) * 100 : 0;
                        summaryFields.total.textContent = formatNumber(totalEntries);
                        summaryFields.totalStatus.textContent = data.statusSummary || '—';
                        summaryFields.unbalanced.textContent = formatNumber(unbalancedEntries);
                        summaryFields.debit.textContent = formatNumber(data.totalDebit);
                        summaryFields.credit.textContent = formatNumber(data.totalCredit);
                        summaryFields.ratio.textContent = formatPercentage(balancedRatio);
                        renderInsightMessage(totalEntries, unbalancedEntries, balancedRatio);
                        renderSmartSuggestions(totalEntries, unbalancedEntries, data.totalDebit, data.totalCredit);
                    })
                    .catch(function (error) {
                        console.warn(error);
                        if (summaryInsight) {
                            summaryInsight.textContent = 'تعذر تحديث الملخص في الوقت الحالي.';
                        }
                    });
            }

            function persistCurrentFilters(searchValue) {
                const params = gatherFilterParameters(searchValue);
                persistFilters({
                    fromDate: params.fromDate || '',
                    toDate: params.toDate || '',
                    branchId: params.branchId || '',
                    status: params.status || '',
                    groupBy: state.groupBy || '',
                    showUnbalancedOnly: params.showUnbalancedOnly === 'true',
                    searchTerm: params.searchTerm || '',
                    pageSize: state.pageSize,
                    sortField: state.sortField,
                    sortDir: state.sortDir
                });
            }

            function authorizedFetch(url, options) {
                const settings = Object.assign({}, options);
                settings.headers = Object.assign({ 'X-Requested-With': 'XMLHttpRequest' }, settings.headers || {});
                if (antiForgeryToken && !settings.headers['RequestVerificationToken']) {
                    settings.headers['RequestVerificationToken'] = antiForgeryToken;
                }
                return fetch(url, settings);
            }

            function buildDataRequest(params) {
                const skip = (state.page - 1) * state.pageSize;
                const payload = {
                    skip: skip,
                    take: state.pageSize,
                    requiresCounts: true,
                    params: params,
                    Params: params
                };
                if (state.sortField) {
                    payload.sorted = [{
                        name: state.sortField,
                        field: state.sortField,
                        direction: state.sortDir
                    }];
                }
                return payload;
            }

            function showTableLoading() {
                if (loadingOverlay) {
                    loadingOverlay.hidden = false;
                }
            }

            function hideTableLoading() {
                if (loadingOverlay) {
                    loadingOverlay.hidden = true;
                }
            }

            function escapeHtml(value) {
                if (value === null || value === undefined) {
                    return '';
                }
                return String(value)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            }

            function escapeAttr(value) {
                return escapeHtml(value);
            }

            function getGroupDescriptor(entry) {
                const key = state.groupBy;
                if (!key) {
                    return { value: '', label: '' };
                }
                const rawValue = entry && entry[key] ? entry[key] : '';
                switch (key) {
                    case 'BranchName':
                        return { value: rawValue || 'غير محدد', label: rawValue || 'فرع غير محدد' };
                    case 'StatusDisplay':
                        return { value: rawValue || 'غير محدد', label: rawValue || 'حالة غير محددة' };
                    case 'DateGroup':
                        if (!rawValue) {
                            return { value: 'غير محدد', label: 'بدون تاريخ' };
                        }
                        const [year, month] = String(rawValue).split('-');
                        if (year && month) {
                            const date = new Date(Number(year), Number(month) - 1, 1);
                            const label = date.toLocaleDateString(undefined, { month: 'long', year: 'numeric' });
                            return { value: rawValue, label: label };
                        }
                        return { value: rawValue, label: rawValue };
                    case 'Reference':
                        return { value: rawValue || 'بدون مرجع', label: rawValue || 'بدون مرجع' };
                    default:
                        return { value: rawValue || 'غير محدد', label: rawValue || 'غير محدد' };
                }
            }

            function buildActions(entry) {
                const id = encodeURIComponent(entry.Id);
                const numberAttr = escapeAttr(entry.Number || '');
                let html = '<div class="d-flex justify-content-center flex-wrap gap-2 table-actions" role="group">';
                html += '<a href="' + routes.details + '/' + id + '" class="btn btn-sm btn-outline-info" title="عرض"><i class="fas fa-eye"></i></a>';
                if (entry.IsDraft && permissions.canEdit) {
                    html += '<a href="' + routes.edit + '/' + id + '" class="btn btn-sm btn-outline-warning" title="تعديل"><i class="fas fa-edit"></i></a>';
                }
                if (entry.IsDraft && permissions.canApprove) {
                    html += '<button type="button" class="btn btn-sm btn-outline-success btn-post-entry" data-id="' + id + '" data-number="' + numberAttr + '" title="ترحيل"><i class="fas fa-share"></i></button>';
                }
                html += '<a href="' + routes.print + '/' + id + '" target="_blank" class="btn btn-sm btn-outline-secondary" title="طباعة"><i class="fas fa-print"></i></a>';
                if (entry.CanDelete && permissions.canDelete) {
                    html += '<button type="button" class="btn btn-sm btn-outline-danger btn-delete-entry" data-id="' + id + '" data-number="' + numberAttr + '" title="إلغاء"><i class="fas fa-trash"></i></button>';
                }
                html += '</div>';
                return html;
            }

            function buildRow(entry) {
                const cells = [];
                cells.push('<td>' + escapeHtml(entry.Number || '') + '</td>');
                cells.push('<td>' + escapeHtml(entry.DateFormatted || entry.Date || '') + '</td>');
                cells.push('<td>' + escapeHtml(entry.Description || '') + '</td>');
                cells.push('<td>' + escapeHtml(entry.Reference || '') + '</td>');
                cells.push('<td>' + escapeHtml(entry.BranchName || '') + '</td>');
                cells.push('<td>' + escapeHtml(entry.CreatedByName || '') + '</td>');
                cells.push('<td class="text-end">' + escapeHtml(entry.TotalDebitFormatted || entry.TotalDebit || '') + '</td>');
                cells.push('<td class="text-end">' + escapeHtml(entry.TotalCreditFormatted || entry.TotalCredit || '') + '</td>');
                cells.push('<td class="text-center">' + escapeHtml(entry.LinesCount != null ? entry.LinesCount : '') + '</td>');
                cells.push('<td class="text-center"><span class="badge ' + escapeHtml(entry.StatusClass || 'bg-secondary') + '">' + escapeHtml(entry.StatusDisplay || '') + '</span></td>');
                cells.push('<td class="text-center">' + buildActions(entry) + '</td>');
                const rowClass = entry.IsBalanced === false ? ' class="unbalanced-entry"' : '';
                return '<tr' + rowClass + '>' + cells.join('') + '</tr>';
            }

            function renderTable(records) {
                if (!tableBody) {
                    return;
                }
                if (!records || records.length === 0) {
                    tableBody.innerHTML = '';
                    if (emptyState) {
                        emptyState.hidden = false;
                    }
                    return;
                }
                if (emptyState) {
                    emptyState.hidden = true;
                }
                const rows = [];
                if (state.groupBy) {
                    const groups = new Map();
                    records.forEach(function (entry) {
                        const descriptor = getGroupDescriptor(entry);
                        if (!groups.has(descriptor.value)) {
                            groups.set(descriptor.value, { label: descriptor.label, items: [] });
                        }
                        groups.get(descriptor.value).items.push(entry);
                    });
                    groups.forEach(function (group) {
                        rows.push('<tr class="group-header-row"><td colspan="11">' + escapeHtml(group.label) + '</td></tr>');
                        group.items.forEach(function (entry) {
                            rows.push(buildRow(entry));
                        });
                    });
                } else {
                    records.forEach(function (entry) {
                        rows.push(buildRow(entry));
                    });
                }
                tableBody.innerHTML = rows.join('');
            }

            function updateResultsInfo(visibleCount) {
                if (!resultInfo) {
                    return;
                }
                const total = state.totalCount || 0;
                if (total === 0) {
                    resultInfo.textContent = 'لا توجد بيانات مطابقة للمرشحات الحالية';
                    return;
                }
                const start = ((state.page - 1) * state.pageSize) + 1;
                const end = start + Math.max(visibleCount - 1, 0);
                resultInfo.textContent = 'عرض ' + start + ' - ' + end + ' من ' + total + ' قيد';
            }

            function updateGroupingInfo() {
                if (!groupingInfo) {
                    return;
                }
                if (state.groupBy) {
                    const label = groupLabels[state.groupBy] || state.groupBy;
                    groupingInfo.hidden = false;
                    groupingInfo.textContent = 'مجموعة حسب: ' + label;
                } else {
                    groupingInfo.hidden = true;
                }
            }

            function updateSortIndicators() {
                if (!table) {
                    return;
                }
                const headers = table.querySelectorAll('thead th.sortable');
                headers.forEach(function (th) {
                    const sortField = th.getAttribute('data-sort');
                    const indicator = th.querySelector('.sort-indicator i');
                    if (!indicator) {
                        return;
                    }
                    if (sortField === state.sortField) {
                        th.classList.add('active');
                        const dir = state.sortDir === 'Ascending' ? 'ascending' : 'descending';
                        th.setAttribute('aria-sort', dir);
                        indicator.className = 'fas ' + (state.sortDir === 'Ascending' ? 'fa-sort-up' : 'fa-sort-down');
                    } else {
                        th.classList.remove('active');
                        th.setAttribute('aria-sort', 'none');
                        indicator.className = 'fas fa-sort';
                    }
                });
            }

            function renderPagination() {
                if (!pagination) {
                    return;
                }
                const total = state.totalCount || 0;
                if (!total || total <= state.pageSize) {
                    pagination.innerHTML = '';
                    if (paginationNav) {
                        paginationNav.classList.add('d-none');
                    }
                    return;
                }
                const totalPages = Math.ceil(total / state.pageSize);
                if (paginationNav) {
                    paginationNav.classList.toggle('d-none', totalPages <= 1);
                }
                const current = Math.min(state.page, totalPages);
                const maxVisible = 5;
                let start = Math.max(1, current - Math.floor(maxVisible / 2));
                let end = Math.min(totalPages, start + maxVisible - 1);
                start = Math.max(1, end - maxVisible + 1);
                const items = [];
                items.push(createPageControl(current <= 1, current - 1, '<span aria-hidden="true">&laquo;</span>', 'الصفحة السابقة'));
                for (let page = start; page <= end; page++) {
                    const isActive = page === current;
                    items.push('<li class="page-item' + (isActive ? ' active' : '') + '"><button type="button" class="page-link" data-page="' + page + '" aria-label="الصفحة ' + page + '">' + page + '</button></li>');
                }
                items.push(createPageControl(current >= totalPages, current + 1, '<span aria-hidden="true">&raquo;</span>', 'الصفحة التالية'));
                pagination.innerHTML = items.join('');
            }

            function createPageControl(disabled, targetPage, labelHtml, ariaLabel) {
                const classes = ['page-item'];
                if (disabled) {
                    classes.push('disabled');
                }
                const attributes = ['type="button"', 'class="page-link"'];
                if (!disabled) {
                    attributes.push('data-page="' + targetPage + '"');
                }
                if (ariaLabel) {
                    attributes.push('aria-label="' + ariaLabel + '"');
                }
                if (disabled) {
                    attributes.push('tabindex="-1"', 'aria-disabled="true"');
                }
                if (disabled) {
                    attributes.push('disabled');
                }
                return '<li class="' + classes.join(' ') + '"><button ' + attributes.join(' ') + '>' + labelHtml + '</button></li>';
            }

            function updateFilterChips(searchValue) {
                if (!activeFiltersContainer || !activeFiltersCount) {
                    return;
                }
                const params = gatherFilterParameters(searchValue);
                const chips = [];
                if (params.fromDate) {
                    chips.push({ key: 'fromDate', label: 'من: ' + params.fromDate });
                }
                if (params.toDate) {
                    chips.push({ key: 'toDate', label: 'إلى: ' + params.toDate });
                }
                if (params.branchId) {
                    const branchSelect = filterControls.branchId;
                    const branchText = branchSelect && branchSelect.options[branchSelect.selectedIndex] ? branchSelect.options[branchSelect.selectedIndex].text : params.branchId;
                    chips.push({ key: 'branchFilter', label: 'الفرع: ' + branchText });
                }
                if (params.status) {
                    const statusSelect = filterControls.status;
                    const statusText = statusSelect && statusSelect.options[statusSelect.selectedIndex] ? statusSelect.options[statusSelect.selectedIndex].text : params.status;
                    chips.push({ key: 'statusFilter', label: 'الحالة: ' + statusText });
                }
                if (state.groupBy) {
                    chips.push({ key: 'groupBy', label: 'التجميع: ' + (groupLabels[state.groupBy] || state.groupBy) });
                }
                if (params.showUnbalancedOnly === 'true') {
                    chips.push({ key: 'showUnbalancedOnly', label: 'غير متوازنة فقط' });
                }
                if (params.searchTerm) {
                    chips.push({ key: 'searchTerm', label: 'بحث: ' + params.searchTerm });
                }
                activeFiltersContainer.innerHTML = '';
                chips.forEach(function (chip) {
                    const span = document.createElement('span');
                    span.className = 'filter-chip';
                    span.dataset.key = chip.key;
                    span.innerHTML = '<span>' + chip.label + '</span><button type="button" aria-label="إزالة الفلتر"><i class="fas fa-times"></i></button>';
                    activeFiltersContainer.appendChild(span);
                });
                activeFiltersCount.textContent = chips.length;
                activeFiltersCount.classList.toggle('d-none', chips.length === 0);
            }

            function debounce(fn, delay) {
                let timer;
                return function () {
                    const args = arguments;
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        fn.apply(null, args);
                    }, delay);
                };
            }

            function loadEntries(options) {
                options = options || {};
                if (options.resetPage) {
                    state.page = 1;
                }
                const searchValue = getQuickSearchValue();
                updateSearchClearState(searchValue);
                const params = gatherFilterParameters(searchValue);
                updateFilterChips(searchValue);
                updateGroupingInfo();
                updateSortIndicators();
                updateSummary(searchValue);
                persistCurrentFilters(searchValue);
                showTableLoading();
                showLoading();
                const requestPayload = buildDataRequest(params);
                authorizedFetch(dataUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestPayload)
                })
                    .then(function (response) {
                        if (!response.ok) {
                            return response.text().then(function (message) {
                                throw new Error(message || 'تعذر تحميل البيانات');
                            });
                        }
                        return response.json();
                    })
                    .then(function (data) {
                        const records = Array.isArray(data.result) ? data.result : (Array.isArray(data) ? data : []);
                        const totalCount = typeof data.count === 'number' ? data.count : records.length;
                        state.totalCount = totalCount;
                        const totalPages = Math.max(1, Math.ceil((totalCount || 0) / state.pageSize));
                        if (totalCount > 0 && state.page > totalPages) {
                            state.page = totalPages;
                            return loadEntries();
                        }
                        state.data = records;
                        renderTable(records);
                        renderPagination();
                        updateResultsInfo(records.length);
                        if (lastRefreshAt) {
                            lastRefreshAt.textContent = new Date().toLocaleString();
                        }
                    })
                    .catch(function (error) {
                        console.error(error);
                        state.totalCount = 0;
                        state.data = [];
                        renderTable([]);
                        renderPagination();
                        updateResultsInfo(0);
                    })
                    .finally(function () {
                        hideTableLoading();
                        hideLoading();
                    });
            }

            const debouncedSearch = debounce(function () {
                loadEntries({ resetPage: true });
            }, 350);

            applyStoredFilters();
            updateGroupingInfo();
            updateSortIndicators();
            updateSearchClearState(getQuickSearchValue());
            loadEntries({ resetPage: true });

            ['fromDate', 'toDate', 'branchFilter', 'statusFilter'].forEach(function (id) {
                const element = document.getElementById(id);
                if (!element) {
                    return;
                }
                element.addEventListener('change', function () {
                    loadEntries({ resetPage: true });
                });
            });

            if (groupSelect) {
                groupSelect.addEventListener('change', function (event) {
                    state.groupBy = event.target.value || '';
                    loadEntries({ resetPage: true });
                });
            }

            if (unbalancedToggle) {
                unbalancedToggle.addEventListener('change', function () {
                    loadEntries({ resetPage: true });
                });
            }

            if (pageSizeSelect) {
                pageSizeSelect.addEventListener('change', function (event) {
                    const value = parseInt(event.target.value, 10);
                    state.pageSize = Number.isNaN(value) ? state.pageSize : value;
                    loadEntries({ resetPage: true });
                });
            }

            if (pagination) {
                pagination.addEventListener('click', function (event) {
                    const button = event.target.closest('button[data-page]');
                    if (!button) {
                        return;
                    }
                    const targetPage = parseInt(button.getAttribute('data-page'), 10);
                    if (Number.isNaN(targetPage) || targetPage === state.page) {
                        return;
                    }
                    state.page = targetPage;
                    loadEntries();
                });
            }

            if (activeFiltersContainer) {
                activeFiltersContainer.addEventListener('click', function (event) {
                    const button = event.target.closest('button');
                    if (!button) {
                        return;
                    }
                    const chip = button.closest('.filter-chip');
                    if (!chip) {
                        return;
                    }
                    const key = chip.dataset.key;
                    switch (key) {
                        case 'fromDate':
                            if (filterControls.fromDate) {
                                filterControls.fromDate.value = '';
                            }
                            break;
                        case 'toDate':
                            if (filterControls.toDate) {
                                filterControls.toDate.value = '';
                            }
                            break;
                        case 'branchFilter':
                            if (filterControls.branchId) {
                                filterControls.branchId.selectedIndex = 0;
                            }
                            break;
                        case 'statusFilter':
                            if (filterControls.status) {
                                filterControls.status.selectedIndex = 0;
                            }
                            break;
                        case 'groupBy':
                            state.groupBy = '';
                            if (groupSelect) {
                                groupSelect.value = '';
                            }
                            break;
                        case 'showUnbalancedOnly':
                            if (unbalancedToggle) {
                                unbalancedToggle.checked = false;
                            }
                            break;
                        case 'searchTerm':
                            if (searchInput) {
                                searchInput.value = '';
                            }
                            break;
                    }
                    loadEntries({ resetPage: true });
                });
            }

            if (clearSearchButton) {
                clearSearchButton.addEventListener('click', function () {
                    if (!searchInput) {
                        return;
                    }
                    searchInput.value = '';
                    updateSearchClearState('');
                    loadEntries({ resetPage: true });
                });
            }

            if (searchInput) {
                searchInput.addEventListener('input', function () {
                    debouncedSearch();
                });
                searchInput.addEventListener('keydown', function (event) {
                    if (event.key === 'Enter') {
                        event.preventDefault();
                    }
                });
            }

            if (refreshButton) {
                refreshButton.addEventListener('click', function () {
                    loadEntries();
                });
            }

            if (resetFiltersButton) {
                resetFiltersButton.addEventListener('click', function () {
                    ['fromDate', 'toDate'].forEach(function (id) {
                        const input = document.getElementById(id);
                        if (input) {
                            input.value = '';
                        }
                    });
                    ['branchFilter', 'statusFilter'].forEach(function (id) {
                        const select = document.getElementById(id);
                        if (select) {
                            select.selectedIndex = 0;
                        }
                    });
                    state.groupBy = '';
                    if (groupSelect) {
                        groupSelect.value = '';
                    }
                    if (unbalancedToggle) {
                        unbalancedToggle.checked = false;
                    }
                    if (searchInput) {
                        searchInput.value = '';
                    }
                    if (pageSizeSelect) {
                        pageSizeSelect.value = '25';
                        state.pageSize = 25;
                    }
                    state.sortField = 'Date';
                    state.sortDir = 'Descending';
                    updateSortIndicators();
                    updateSearchClearState('');
                    clearPersistedFilters();
                    loadEntries({ resetPage: true });
                });
            }

            if (table) {
                const header = table.querySelector('thead');
                if (header) {
                    header.addEventListener('click', function (event) {
                        const cell = event.target.closest('th.sortable');
                        if (!cell) {
                            return;
                        }
                        const sortField = cell.getAttribute('data-sort');
                        if (!sortField) {
                            return;
                        }
                        if (state.sortField === sortField) {
                            state.sortDir = state.sortDir === 'Ascending' ? 'Descending' : 'Ascending';
                        } else {
                            state.sortField = sortField;
                            state.sortDir = sortField === 'Date' ? 'Descending' : 'Ascending';
                        }
                        state.page = 1;
                        updateSortIndicators();
                        loadEntries();
                    });
                    header.addEventListener('keydown', function (event) {
                        if ((event.key === 'Enter' || event.key === ' ') && event.target.closest('th.sortable')) {
                            event.preventDefault();
                            const cell = event.target.closest('th.sortable');
                            if (cell) {
                                cell.click();
                            }
                        }
                    });
                }
            }

            if (tableBody) {
                tableBody.addEventListener('click', function (event) {
                    const postButton = event.target.closest('.btn-post-entry');
                    if (postButton) {
                        const entryId = postButton.getAttribute('data-id');
                        const number = postButton.getAttribute('data-number');
                        if (!entryId) {
                            return;
                        }
                        if (!confirm('هل تريد ترحيل القيد رقم ' + number + '?')) {
                            return;
                        }
                        showLoading();
                        authorizedFetch(postUrlBase + '/' + entryId, {
                            method: 'POST'
                        })
                            .then(function (response) {
                                if (!response.ok) {
                                    return response.text().then(function (message) {
                                        throw new Error(message || 'تعذر ترحيل القيد.');
                                    });
                                }
                                return response.text();
                            })
                            .then(function () {
                                if (window.swal) {
                                    swal({ title: 'تم الترحيل بنجاح', icon: 'success', button: 'حسناً' });
                                } else {
                                    alert('تم ترحيل القيد بنجاح');
                                }
                                loadEntries();
                            })
                            .catch(function (error) {
                                if (window.swal) {
                                    swal({ title: 'خطأ', text: error.message, icon: 'error', button: 'إغلاق' });
                                } else {
                                    alert(error.message);
                                }
                            })
                            .finally(function () {
                                hideLoading();
                            });
                        return;
                    }
                    const deleteButton = event.target.closest('.btn-delete-entry');
                    if (!deleteButton) {
                        return;
                    }
                    const deleteId = deleteButton.getAttribute('data-id');
                    const deleteNumber = deleteButton.getAttribute('data-number');
                    if (!deleteId) {
                        return;
                    }
                    if (!confirm('هل تريد إلغاء القيد رقم ' + deleteNumber + '?')) {
                        return;
                    }
                    showLoading();
                    authorizedFetch(deleteUrlBase + '/' + deleteId, {
                        method: 'POST'
                    })
                        .then(function (response) {
                            if (!response.ok) {
                                return response.text().then(function (message) {
                                    throw new Error(message || 'تعذر إلغاء القيد.');
                                });
                            }
                            return response.text();
                        })
                        .then(function () {
                            if (window.swal) {
                                swal({ title: 'تم الإلغاء بنجاح', icon: 'success', button: 'حسناً' });
                            } else {
                                alert('تم إلغاء القيد بنجاح');
                            }
                            loadEntries();
                        })
                        .catch(function (error) {
                            if (window.swal) {
                                swal({ title: 'خطأ', text: error.message, icon: 'error', button: 'إغلاق' });
                            } else {
                                alert(error.message);
                            }
                        })
                        .finally(function () {
                            hideLoading();
                        });
                });
            }
        });
    </script>
}
