@model AccountingSystem.ViewModels.CreateJournalEntryViewModel
@using System.Text.Json
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "تعديل قيد مالي";
    var accountsDataJson = JsonSerializer.Serialize((Model.Accounts ?? new List<SelectListItem>()).Select(a => new
    {
        id = a.Value ?? string.Empty,
        code = (a.Text ?? string.Empty).Split(" - ")[0],
        text = a.Text ?? string.Empty
    }));
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-warning">
                    <h4 class="mb-0">
                        <i class="fas fa-edit me-2"></i>
                        تعديل قيد مالي
                    </h4>
                </div>
                <div class="card-body">
                    <form asp-action="Edit" method="post" id="journalEntryForm">
                        <input type="hidden" asp-for="Id" />
                        <div class="row mb-3">
                            <div class="col-md-3">
                                <label asp-for="Number" class="form-label">رقم القيد:</label>
                                <input asp-for="Number" class="form-control" readonly />
                                <span asp-validation-for="Number" class="text-danger"></span>
                            </div>
                            <div class="col-md-3">
                                <label asp-for="Date" class="form-label">التاريخ:</label>
                                <input asp-for="Date" type="date" class="form-control" />
                                <span asp-validation-for="Date" class="text-danger"></span>
                            </div>
                            <div class="col-md-3">
                                <label asp-for="BranchId" class="form-label">الفرع:</label>
                                <select asp-for="BranchId" asp-items="Model.Branches" class="form-select"></select>
                                <span asp-validation-for="BranchId" class="text-danger"></span>
                            </div>
                            <div class="col-md-3">
                                <label asp-for="Reference" class="form-label">المرجع:</label>
                                <input asp-for="Reference" class="form-control" />
                                <span asp-validation-for="Reference" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-12">
                                <label asp-for="Description" class="form-label">البيان:</label>
                                <textarea asp-for="Description" class="form-control" rows="2"></textarea>
                                <span asp-validation-for="Description" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="card border-secondary mb-3">
                            <div class="card-header bg-light">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">بنود القيد</h6>
                                    <button type="button" class="btn btn-sm btn-success" onclick="addJournalLine()">
                                        <i class="fas fa-plus me-1"></i>
                                        إضافة بند
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-bordered" id="journalLinesTable">
                                        <thead class="table-dark">
                                            <tr>
                                                <th style="width: 15%">الكود</th>
                                                <th style="width: 25%">اسم الحساب</th>
                                                <th style="width: 18%">البيان</th>
                                                <th style="width: 18%">مركز التكلفة</th>
                                                <th style="width: 12%">مدين</th>
                                                <th style="width: 12%">دائن</th>
                                                <th style="width: 5%">حذف</th>
                                            </tr>
                                        </thead>
                                        <tbody id="journalLinesBody">
                                            @for (int i = 0; i < Model.Lines.Count; i++)
                                            {
                                                <tr>
                                                    <td>
                                                        <input type="text" class="form-control account-code" value="@Model.Lines[i].AccountCode" readonly />
                                                    </td>
                                                    <td>
                                                        <select name="Lines[@i].AccountId" class="form-select account-select" required onchange="updateAccountInfo(this)">
                                                            <option value="">اختر الحساب</option>
                                                            @foreach (var account in Model.Accounts ?? new List<SelectListItem>())
                                                            {
                                                                var selected = account.Value == Model.Lines[i].AccountId.ToString() ? "selected" : string.Empty;
                                                                <option value="@account.Value" @selected>@account.Text</option>
                                                            }
                                                        </select>
                                                    </td>
                                                <td>
                                                    <input name="Lines[@i].Description" class="form-control" value="@Model.Lines[i].Description" />
                                                </td>
                                                <td>
                                                    <select asp-for="Lines[@i].CostCenterId" asp-items="Model.CostCenters" class="form-select cost-center-select"></select>
                                                </td>
                                                <td>
                                                    <input name="Lines[@i].DebitAmount" type="number" step="0.01" min="0" class="form-control debit-amount" value="@Model.Lines[i].DebitAmount" onchange="calculateTotals()" />
                                                </td>
                                                    <td>
                                                        <input name="Lines[@i].CreditAmount" type="number" step="0.01" min="0" class="form-control credit-amount" value="@Model.Lines[i].CreditAmount" onchange="calculateTotals()" />
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-danger" onclick="removeJournalLine(this)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr class="table-info">
                                                <td colspan="4"><strong>الإجمالي:</strong></td>
                                                <td><strong id="totalDebit">0.00</strong></td>
                                                <td><strong id="totalCredit">0.00</strong></td>
                                                <td></td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                                <div id="balanceAlert" class="alert alert-warning d-none">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    القيد غير متوازن! يجب أن يكون إجمالي المدين مساوياً لإجمالي الدائن.
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <button type="submit" class="btn btn-warning me-2" id="saveButton">
                                    <i class="fas fa-save me-1"></i>
                                    حفظ التعديلات
                                </button>
                                <a asp-action="Index" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left me-1"></i>
                                    العودة للقائمة
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const accountsData = @Html.Raw(accountsDataJson);
    const accountsLookup = accountsData.reduce((acc, item) => {
        if (item && item.id) {
            acc[item.id] = item;
        }
        return acc;
    }, {});

    let lineIndex = @Model.Lines.Count;

    function addJournalLine() {
        const tbody = document.getElementById('journalLinesBody');
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <input type="text" class="form-control account-code" readonly />
            </td>
            <td>
                <select name="Lines[${lineIndex}].AccountId" class="form-select account-select" required onchange="updateAccountInfo(this)">
                    <option value="">اختر الحساب</option>
                    @foreach (var account in Model.Accounts ?? new List<SelectListItem>())
                    {
                            <option value="@account.Value">@account.Text</option>
                    }
                </select>
            </td>
            <td>
                <input name="Lines[${lineIndex}].Description" type="text" class="form-control" />
            </td>
            <td>
                <select name="Lines[${lineIndex}].CostCenterId" class="form-select cost-center-select">
                    @foreach (var costCenter in Model.CostCenters)
                    {
                            <option value="@costCenter.Value">@costCenter.Text</option>
                    }
                </select>
            </td>
            <td>
                <input name="Lines[${lineIndex}].DebitAmount" type="number" step="0.01" min="0" class="form-control debit-amount" onchange="calculateTotals()" />
            </td>
            <td>
                <input name="Lines[${lineIndex}].CreditAmount" type="number" step="0.01" min="0" class="form-control credit-amount" onchange="calculateTotals()" />
            </td>
            <td>
                <button type="button" class="btn btn-sm btn-danger" onclick="removeJournalLine(this)">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        `;
        tbody.appendChild(row);
        lineIndex++;
        calculateTotals();
    }

    function removeJournalLine(button) {
        button.closest('tr').remove();
        calculateTotals();
    }

    function updateAccountInfo(selectElement) {
        const row = selectElement.closest('tr');
        const codeInput = row.querySelector('.account-code');
        if (!codeInput) {
            return;
        }

        const selectedValue = selectElement.value;
        const account = accountsLookup[selectedValue];
        codeInput.value = account ? account.code : '';
    }

    function initializeAccountCodes() {
        document.querySelectorAll('#journalLinesBody .account-select').forEach(select => {
            updateAccountInfo(select);
        });
    }

    function calculateTotals() {
        let totalDebit = 0;
        let totalCredit = 0;

        document.querySelectorAll('.debit-amount').forEach(input => {
            totalDebit += parseFloat(input.value) || 0;
        });

        document.querySelectorAll('.credit-amount').forEach(input => {
            totalCredit += parseFloat(input.value) || 0;
        });

        document.getElementById('totalDebit').textContent = totalDebit.toFixed(2);
        document.getElementById('totalCredit').textContent = totalCredit.toFixed(2);

        const balanceAlert = document.getElementById('balanceAlert');
        const saveButton = document.getElementById('saveButton');

        if (Math.abs(totalDebit - totalCredit) > 0.01) {
            balanceAlert.classList.remove('d-none');
            saveButton.disabled = true;
        } else {
            balanceAlert.classList.add('d-none');
            saveButton.disabled = false;
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        calculateTotals();
        initializeAccountCodes();
    });
</script>
