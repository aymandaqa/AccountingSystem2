@model AccountingSystem.Models.CompoundJournals.CompoundJournalDefinition
@using AccountingSystem.Models.CompoundJournals
@using Microsoft.AspNetCore.Html
@using System.Linq
@{
    ViewData["Title"] = "تفاصيل القيد المركب";
    var logs = ViewBag.ExecutionLogs as IEnumerable<AccountingSystem.Models.CompoundJournals.CompoundJournalExecutionLog> ?? Enumerable.Empty<AccountingSystem.Models.CompoundJournals.CompoundJournalExecutionLog>();
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="mb-0">@Model.Name</h2>
    <div>
        <a class="btn btn-secondary" asp-action="Index"><i class="fas fa-arrow-left"></i> رجوع</a>
        <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model.Id"><i class="fas fa-edit"></i> تعديل</a>
        <a class="btn btn-success" asp-action="Execute" asp-route-id="@Model.Id"><i class="fas fa-play"></i> تشغيل يدوي</a>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}
@if (TempData["Warning"] != null)
{
    <div class="alert alert-warning">@TempData["Warning"]</div>
}

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header">معلومات عامة</div>
            <div class="card-body">
                <dl class="row mb-0">
                    <dt class="col-sm-4">الوصف</dt>
                    <dd class="col-sm-8">@Model.Description</dd>

                    <dt class="col-sm-4">نوع التنفيذ</dt>
                    <dd class="col-sm-8">@GetTriggerTypeText(Model.TriggerType)</dd>

                    <dt class="col-sm-4">الحالة</dt>
                    <dd class="col-sm-8">
                        @if (Model.IsActive)
                        {
                            <span class="badge bg-success">نشط</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">متوقف</span>
                        }
                    </dd>

                    <dt class="col-sm-4">تاريخ البدء</dt>
                    <dd class="col-sm-8">@FormatDate(Model.StartDateUtc)</dd>

                    <dt class="col-sm-4">تاريخ الانتهاء</dt>
                    <dd class="col-sm-8">@FormatDate(Model.EndDateUtc)</dd>

                    <dt class="col-sm-4">موعد التنفيذ القادم</dt>
                    <dd class="col-sm-8">@FormatDate(Model.NextRunUtc)</dd>

                    <dt class="col-sm-4">آخر تنفيذ</dt>
                    <dd class="col-sm-8">@FormatDate(Model.LastRunUtc)</dd>

                    @if (Model.TriggerType == CompoundJournalTriggerType.Recurring)
                    {
                        <dt class="col-sm-4">نوع التكرار</dt>
                        <dd class="col-sm-8">@GetRecurrenceText(Model.Recurrence)</dd>

                        <dt class="col-sm-4">فترة التكرار</dt>
                        <dd class="col-sm-8">@Model.RecurrenceInterval</dd>
                    }
                </dl>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header">القالب</div>
            <div class="card-body">
                <pre class="mb-0" style="white-space: pre-wrap; direction: ltr;">@Html.Raw(Html.Encode(ViewBag.TemplatePreview ?? Model.TemplateJson))</pre>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">سجل التنفيذ</div>
    <div class="card-body table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>التاريخ</th>
                    <th>نوع التنفيذ</th>
                    <th>الحالة</th>
                    <th>الرسالة</th>
                    <th>رقم القيد</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in logs)
                {
                    <tr>
                        <td>@FormatDate(log.ExecutedAtUtc)</td>
                        <td>@(log.IsAutomatic ? "آلي" : "يدوي")</td>
                        <td>@GetStatusBadge(log.Status)</td>
                        <td>@log.Message</td>
                        <td>
                            @if (log.JournalEntryId.HasValue)
                            {
                                <a asp-controller="JournalEntries" asp-action="Details" asp-route-id="@log.JournalEntryId">@log.JournalEntryId</a>
                            }
                        </td>
                    </tr>
                }
                @if (!logs.Any())
                {
                    <tr>
                        <td colspan="5" class="text-center text-muted">لا توجد عمليات تنفيذ بعد.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@functions {
    private static string FormatDate(DateTime? date)
    {
        return date.HasValue ? date.Value.ToLocalTime().ToString("dd/MM/yyyy HH:mm") : "-";
    }

    private static string GetTriggerTypeText(CompoundJournalTriggerType triggerType)
    {
        return triggerType switch
        {
            CompoundJournalTriggerType.Manual => "يدوي",
            CompoundJournalTriggerType.OneTime => "مرة واحدة",
            CompoundJournalTriggerType.Recurring => "متكرر",
            _ => triggerType.ToString()
        };
    }

    private static string GetRecurrenceText(CompoundJournalRecurrence? recurrence)
    {
        return recurrence switch
        {
            CompoundJournalRecurrence.Daily => "يومي",
            CompoundJournalRecurrence.Weekly => "أسبوعي",
            CompoundJournalRecurrence.Monthly => "شهري",
            CompoundJournalRecurrence.Yearly => "سنوي",
            _ => "-"
        };
    }

    private static IHtmlContent GetStatusBadge(CompoundJournalExecutionStatus status)
    {
        var (css, text) = status switch
        {
            CompoundJournalExecutionStatus.Success => ("bg-success", "ناجح"),
            CompoundJournalExecutionStatus.Skipped => ("bg-warning", "تم التجاوز"),
            CompoundJournalExecutionStatus.Failed => ("bg-danger", "فشل"),
            _ => ("bg-secondary", status.ToString())
        };

        return new HtmlString($"<span class='badge {css}'>{text}</span>");
    }
}
