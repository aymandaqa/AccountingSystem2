@using AccountingSystem.ViewModels
@using Microsoft.AspNetCore.Authorization
@using System.Linq
@model DashboardViewModel
@inject IAuthorizationService AuthorizationService

@{
    ViewData["Title"] = "لوحة التحكم";
    var canViewStats = (await AuthorizationService.AuthorizeAsync(User, "dashboard.widget.stats")).Succeeded;
    var canViewAccounts = (await AuthorizationService.AuthorizeAsync(User, "dashboard.widget.accounts")).Succeeded;
    var canViewLinks = (await AuthorizationService.AuthorizeAsync(User, "dashboard.widget.links")).Succeeded;
    var canViewCashBoxes = (await AuthorizationService.AuthorizeAsync(User, "dashboard.widget.cashboxes")).Succeeded;
    var canViewSearch = (await AuthorizationService.AuthorizeAsync(User, "dashboard.widget.search")).Succeeded;

    var canAccessReports = (await AuthorizationService.AuthorizeAsync(User, "reports.view")).Succeeded;
    var canAccessAccounts = (await AuthorizationService.AuthorizeAsync(User, "accounts.view")).Succeeded;
    var canAccessJournal = (await AuthorizationService.AuthorizeAsync(User, "journal.view")).Succeeded;
    var canAccessBranches = (await AuthorizationService.AuthorizeAsync(User, "branches.view")).Succeeded;
    var canAccessCostCenters = (await AuthorizationService.AuthorizeAsync(User, "costcenters.view")).Succeeded;
    var canAccessUsers = (await AuthorizationService.AuthorizeAsync(User, "users.view")).Succeeded;
    var canAccessSuppliers = (await AuthorizationService.AuthorizeAsync(User, "suppliers.view")).Succeeded;
    var canViewDashboard = (await AuthorizationService.AuthorizeAsync(User, "dashboard.view")).Succeeded;

    var canCreateReceiptVouchers = (await AuthorizationService.AuthorizeAsync(User, "receiptvouchers.create")).Succeeded;
    var canCreateDisbursementVouchers = (await AuthorizationService.AuthorizeAsync(User, "disbursementvouchers.create")).Succeeded;
    var canCreateJournalEntries = (await AuthorizationService.AuthorizeAsync(User, "journal.create")).Succeeded;
    var canCreateAssets = (await AuthorizationService.AuthorizeAsync(User, "assets.create")).Succeeded;

    var hasCategorySuggestions = new[] { canAccessAccounts, canAccessJournal, canAccessBranches, canAccessCostCenters }.Any(x => x);
    var hasPopularSuggestions = new[] { canViewDashboard, canAccessReports, canAccessUsers, canAccessSuppliers }.Any(x => x);
    var hasQuickActionSuggestions = new[] { canCreateReceiptVouchers, canCreateDisbursementVouchers, canCreateJournalEntries, canCreateAssets }.Any(x => x);
    var hasAnySuggestions = hasCategorySuggestions || hasPopularSuggestions || hasQuickActionSuggestions;
    var hasQuickLinkTiles = new[] { canAccessAccounts, canAccessJournal, canAccessReports, canAccessBranches, canAccessCostCenters }.Any(x => x);

    string selectedBranchName = "جميع الفروع";
    if (Model.SelectedBranchId.HasValue && ViewBag.Branches != null)
    {
        foreach (var branch in ViewBag.Branches)
        {
            if (branch.Id == Model.SelectedBranchId.Value)
            {
                selectedBranchName = branch.NameAr ?? branch.NameEn ?? branch.Name;
                break;
            }
        }
    }

    var dateRangeLabel = $"{Model.FromDate:dd/MM/yyyy} - {Model.ToDate:dd/MM/yyyy}";
}

<div class="container-fluid dashboard-wrapper">
    <div class="card dashboard-toolbar shadow-sm border-0 mb-4">
        <div class="card-body d-flex flex-wrap align-items-center justify-content-between gap-3">
            <div class="toolbar-brand d-flex align-items-center gap-3">
                <div class="toolbar-icon">
                    <i class="fas fa-chart-pie"></i>
                </div>
                <div>
                    <h4 class="mb-1">مرحباً بك في لوحة التحكم</h4>
                    <p class="mb-0 text-muted">استعرض أحدث الأرقام وحركات النظام من مكان واحد.</p>
                </div>
            </div>
            @if (canViewSearch)
            {
                <div class="toolbar-filters d-flex flex-wrap gap-3">
                    <div class="toolbar-chip">
                        <span class="chip-label"><i class="fas fa-code-branch ms-1"></i> الفرع الحالي</span>
                        <span class="chip-value">@selectedBranchName</span>
                    </div>
                    <div class="toolbar-chip">
                        <span class="chip-label"><i class="fas fa-calendar-alt ms-1"></i> الفترة</span>
                        <span class="chip-value">@dateRangeLabel</span>
                    </div>
                    <div class="toolbar-chip">
                        <span class="chip-label"><i class="fas fa-coins ms-1"></i> العملة</span>
                        <span class="chip-value">@Model.SelectedCurrencyCode</span>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="dashboard-layout">
        <div class="dashboard-main">
            @*     <div class="card dashboard-customization-card shadow-sm border-0 mb-4">
                <div class="card-body d-flex flex-wrap align-items-start justify-content-between gap-3">
                    <div>
                        <h5 class="mb-1"><i class="fas fa-sliders-h ms-2"></i> تخصيص لوحة التحكم</h5>
                        <p class="mb-0 text-muted">رتب الودجات، غير أحجامها، وأخف ما لا تحتاجه لتحصل على لوحة العمل المناسبة لك.</p>
                    </div>
                    <div class="d-flex flex-wrap gap-2">
                        <button type="button" class="btn btn-outline-primary" id="toggleCustomizeWidgets">
                            <i class="fas fa-pen ms-1"></i> <span class="customize-state-label">بدء التخصيص</span>
                        </button>
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-secondary dropdown-toggle" id="addWidgetButton" data-bs-toggle="dropdown" data-bs-auto-close="outside" disabled>
                                <i class="fas fa-plus ms-1"></i> إضافة ودجت
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" id="hiddenWidgetList">
                                <li class="dropdown-item text-muted small">لا توجد ودجات مخفية</li>
                            </ul>
                        </div>
                        <button type="button" class="btn btn-outline-danger" id="resetWidgetLayout">
                            <i class="fas fa-undo-alt ms-1"></i> إعادة ضبط التخطيط
                        </button>
                    </div>
                </div>
            </div>
 *@
            <div id="dashboardWidgetsGrid" class="dashboard-widgets-grid">
                @if (canViewSearch)
                {
                    <div class="dashboard-widget" data-widget-id="search" data-widget-name="البحث السريع" data-default-size="large">
                        <div class="widget-controls" aria-hidden="true">
                            <button type="button" class="widget-control-btn widget-drag-handle" title="سحب لترتيب الودجت">
                                <i class="fas fa-grip-vertical"></i>
                            </button>
                            <div class="widget-resize-controls">
                                <button type="button" class="widget-control-btn widget-size-down" title="تصغير الودجت">
                                    <i class="fas fa-compress-alt"></i>
                                </button>
                                <button type="button" class="widget-control-btn widget-size-up" title="تكبير الودجت">
                                    <i class="fas fa-expand-alt"></i>
                                </button>
                            </div>
                            <button type="button" class="widget-control-btn widget-hide" title="إخفاء الودجت">
                                <i class="fas fa-eye-slash"></i>
                            </button>
                        </div>
                        <section class="card dashboard-search-card shadow-sm border-0 mb-0">
                            <div class="card-body">
                                <div class="dashboard-search-header d-flex flex-wrap align-items-start justify-content-between gap-3 mb-4">
                                    <div>
                                        <span class="search-chip">بحث سريع</span>
                                        <h5 class="mt-2 mb-1">ابحث عن المعاملات وفلتر النتائج بسهولة</h5>
                                        <p class="text-muted mb-0">اختر الفرع والفترة الزمنية والعملة المناسبة، أو ابدأ فلترة جديدة لإظهار جميع البيانات المتاحة.</p>
                                    </div>
                                    <div class="search-actions d-flex flex-wrap gap-2">
                                        <button type="button" class="btn btn-outline-secondary" id="resetFilters">
                                            <i class="fas fa-undo-alt ms-1"></i> إعادة التعيين
                                        </button>
                                        @if (canAccessReports)
                                        {
                                            <a href="@Url.Action("Index", "Reports")" class="btn btn-primary">
                                                <i class="fas fa-chart-line ms-1"></i> التقارير المالية
                                            </a>
                                        }
                                    </div>
                                </div>
                                <div class="dashboard-search-fields row g-3">
                                    <div class="col-12 col-lg-3">
                                        <label for="branchFilter" class="form-label">فلتر حسب الفرع</label>
                                        <div class="search-field">
                                            <i class="fas fa-code-branch"></i>
                                            <select id="branchFilter" class="form-select" onchange="applyFilters()">
                                                <option value="">جميع الفروع</option>
                                                @if (ViewBag.Branches != null)
                                                {
                                                    foreach (var branch in ViewBag.Branches)
                                                    {
                                                        var branchDisplay = branch.NameAr ?? branch.NameEn ?? branch.Name;
                                                        <option value="@branch.Id" selected="@(Model.SelectedBranchId == branch.Id ? "selected" : null)">
                                                            @branchDisplay
                                                        </option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-12 col-lg-3">
                                        <label for="fromDateFilter" class="form-label">من تاريخ</label>
                                        <div class="search-field">
                                            <i class="fas fa-calendar-day"></i>
                                            <input type="date" id="fromDateFilter" class="form-control" value="@Model.FromDate.ToString("yyyy-MM-dd")" onchange="applyFilters()" />
                                        </div>
                                    </div>
                                    <div class="col-12 col-lg-3">
                                        <label for="toDateFilter" class="form-label">إلى تاريخ</label>
                                        <div class="search-field">
                                            <i class="fas fa-calendar-check"></i>
                                            <input type="date" id="toDateFilter" class="form-control" value="@Model.ToDate.ToString("yyyy-MM-dd")" onchange="applyFilters()" />
                                        </div>
                                    </div>
                                    <div class="col-12 col-lg-3">
                                        <label for="currencyFilter" class="form-label">العملة</label>
                                        <div class="search-field">
                                            <i class="fas fa-coins"></i>
                                            <select id="currencyFilter" class="form-select" onchange="applyFilters()">
                                                <option value="">@Model.BaseCurrencyCode</option>
                                                @if (ViewBag.Currencies != null)
                                                {
                                                    foreach (var currency in ViewBag.Currencies)
                                                    {
                                                        <option value="@currency.Id" selected="@(Model.SelectedCurrencyId == currency.Id ? "selected" : null)">@currency.Code</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                @if (hasAnySuggestions)
                                {
                                    <div class="dashboard-search-suggestions mt-4">
                                        @if (hasCategorySuggestions)
                                        {
                                            <div class="suggestion-card">
                                                <h6 class="suggestion-title"><i class="fas fa-layer-group ms-1"></i> التصنيفات</h6>
                                                <ul class="suggestion-list">
                                                    @if (canAccessAccounts)
                                                    {
                                                        <li><a href="@Url.Action("Index", "Accounts")">إدارة الحسابات</a></li>
                                                    }
                                                    @if (canAccessJournal)
                                                    {
                                                        <li><a href="@Url.Action("Index", "JournalEntries")">القيود المالية</a></li>
                                                    }
                                                    @if (canAccessBranches)
                                                    {
                                                        <li><a href="@Url.Action("Index", "Branches")">الفروع</a></li>
                                                    }
                                                    @if (canAccessCostCenters)
                                                    {
                                                        <li><a href="@Url.Action("Index", "CostCenters")">مراكز التكلفة</a></li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                        @if (hasPopularSuggestions)
                                        {
                                            <div class="suggestion-card">
                                                <h6 class="suggestion-title"><i class="fas fa-star ms-1"></i> عناصر شائعة</h6>
                                                <ul class="suggestion-list">
                                                    @if (canViewDashboard)
                                                    {
                                                        <li><a href="@Url.Action("Index", "Dashboard")">لوحة التحكم</a></li>
                                                    }
                                                    @if (canAccessReports)
                                                    {
                                                        <li><a href="@Url.Action("Index", "Reports")">التقارير المالية</a></li>
                                                    }
                                                    @if (canAccessUsers)
                                                    {
                                                        <li><a href="@Url.Action("Index", "Users")">إدارة المستخدمين</a></li>
                                                    }
                                                    @if (canAccessSuppliers)
                                                    {
                                                        <li><a href="@Url.Action("Index", "Suppliers")">الموردون</a></li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                        @if (hasQuickActionSuggestions)
                                        {
                                            <div class="suggestion-card">
                                                <h6 class="suggestion-title"><i class="fas fa-bolt ms-1"></i> إجراءات سريعة</h6>
                                                <ul class="suggestion-list">
                                                    @if (canCreateReceiptVouchers)
                                                    {
                                                        <li><a href="@Url.Action("Create", "ReceiptVouchers")">سند قبض جديد</a></li>
                                                    }
                                                    @if (canCreateDisbursementVouchers)
                                                    {
                                                        <li><a href="@Url.Action("Create", "DisbursementVouchers")">سند صرف جديد</a></li>
                                                    }
                                                    @if (canCreateJournalEntries)
                                                    {
                                                        <li><a href="@Url.Action("Create", "JournalEntries")">قيد مالي جديد</a></li>
                                                    }
                                                    @if (canCreateAssets)
                                                    {
                                                        <li><a href="@Url.Action("Create", "Assets")">إضافة أصل</a></li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </section>
                    </div>
                }

                @if (canViewStats)
                {
                    <div class="dashboard-widget" data-widget-id="stats" data-widget-name="المؤشرات المالية" data-default-size="large">
                        <div class="widget-controls" aria-hidden="true">
                            <button type="button" class="widget-control-btn widget-drag-handle" title="سحب لترتيب الودجت">
                                <i class="fas fa-grip-vertical"></i>
                            </button>
                            <div class="widget-resize-controls">
                                <button type="button" class="widget-control-btn widget-size-down" title="تصغير الودجت">
                                    <i class="fas fa-compress-alt"></i>
                                </button>
                                <button type="button" class="widget-control-btn widget-size-up" title="تكبير الودجت">
                                    <i class="fas fa-expand-alt"></i>
                                </button>
                            </div>
                            <button type="button" class="widget-control-btn widget-hide" title="إخفاء الودجت">
                                <i class="fas fa-eye-slash"></i>
                            </button>
                        </div>
                        <section class="dashboard-stats-grid mb-0">
                            <div class="stat-card gradient-primary">
                                <div class="stat-icon"><i class="fas fa-chart-line"></i></div>
                                <div class="stat-info">
                                    <span class="stat-title">إجمالي الأصول</span>
                                    <span class="stat-value">@Model.TotalAssets.ToString("N0") <small>@Model.SelectedCurrencyCode</small></span>
                                    <span class="stat-sub">(@Model.TotalAssetsBase.ToString("N0") @Model.BaseCurrencyCode)</span>
                                </div>
                            </div>
                            <div class="stat-card gradient-danger">
                                <div class="stat-icon"><i class="fas fa-balance-scale"></i></div>
                                <div class="stat-info">
                                    <span class="stat-title">إجمالي الخصوم</span>
                                    <span class="stat-value">@Model.TotalLiabilities.ToString("N0") <small>@Model.SelectedCurrencyCode</small></span>
                                    <span class="stat-sub">(@Model.TotalLiabilitiesBase.ToString("N0") @Model.BaseCurrencyCode)</span>
                                </div>
                            </div>
                            <div class="stat-card gradient-secondary">
                                <div class="stat-icon"><i class="fas fa-university"></i></div>
                                <div class="stat-info">
                                    <span class="stat-title">إجمالي حقوق الملكية</span>
                                    <span class="stat-value">@Model.TotalEquity.ToString("N0") <small>@Model.SelectedCurrencyCode</small></span>
                                    <span class="stat-sub">(@Model.TotalEquityBase.ToString("N0") @Model.BaseCurrencyCode)</span>
                                </div>
                            </div>
                            <div class="stat-card gradient-success">
                                <div class="stat-icon"><i class="fas fa-dollar-sign"></i></div>
                                <div class="stat-info">
                                    <span class="stat-title">إجمالي الإيرادات</span>
                                    <span class="stat-value">@Model.TotalRevenues.ToString("N0") <small>@Model.SelectedCurrencyCode</small></span>
                                    <span class="stat-sub">(@Model.TotalRevenuesBase.ToString("N0") @Model.BaseCurrencyCode)</span>
                                </div>
                            </div>
                            <div class="stat-card gradient-warning">
                                <div class="stat-icon"><i class="fas fa-shopping-cart"></i></div>
                                <div class="stat-info">
                                    <span class="stat-title">إجمالي المصروفات</span>
                                    <span class="stat-value">@Model.TotalExpenses.ToString("N0") <small>@Model.SelectedCurrencyCode</small></span>
                                    <span class="stat-sub">(@Model.TotalExpensesBase.ToString("N0") @Model.BaseCurrencyCode)</span>
                                </div>
                            </div>
                            <div class="stat-card gradient-info">
                                <div class="stat-icon"><i class="fas fa-chart-pie"></i></div>
                                <div class="stat-info">
                                    <span class="stat-title">صافي الربح</span>
                                    <span class="stat-value">@Model.NetIncome.ToString("N0") <small>@Model.SelectedCurrencyCode</small></span>
                                    <span class="stat-sub">(@Model.NetIncomeBase.ToString("N0") @Model.BaseCurrencyCode)</span>
                                </div>
                            </div>
                        </section>
                    </div>
                }

                @if (canViewCashBoxes || canViewAccounts)
                {
                    <div class="dashboard-widget" data-widget-id="accounts" data-widget-name="أرصدة الحسابات" data-default-size="large">
                        <div class="widget-controls" aria-hidden="true">
                            <button type="button" class="widget-control-btn widget-drag-handle" title="سحب لترتيب الودجت">
                                <i class="fas fa-grip-vertical"></i>
                            </button>
                            <div class="widget-resize-controls">
                                <button type="button" class="widget-control-btn widget-size-down" title="تصغير الودجت">
                                    <i class="fas fa-compress-alt"></i>
                                </button>
                                <button type="button" class="widget-control-btn widget-size-up" title="تكبير الودجت">
                                    <i class="fas fa-expand-alt"></i>
                                </button>
                            </div>
                            <button type="button" class="widget-control-btn widget-hide" title="إخفاء الودجت">
                                <i class="fas fa-eye-slash"></i>
                            </button>
                        </div>
                        <section class="dashboard-panels row g-4 mb-0">
                            @{
                                var accountTreeColumnClass = canViewCashBoxes ? "col-12 col-xl-12" : "col-12 col-xl-12";
                            }

                            @if (canViewCashBoxes)
                            {
                                <div class="@accountTreeColumnClass">
                                    <div class="card account-tree-card shadow-sm border-0 h-100">
                                        <div class="card-header d-flex align-items-center justify-content-between">
                                            <div>
                                                <h5 class="card-title mb-0"><i class="fas fa-sitemap ms-2"></i> أرصدة الحسابات حسب النوع</h5>
                                                <span class="text-muted small">عرض هرمي لتوزيع الحسابات بالقيم المختارة</span>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="mb-3">
                                                @if (Model.ParentAccountConfigured && !string.IsNullOrWhiteSpace(Model.SelectedParentAccountName))
                                                {
                                                    <div class="alert alert-info py-2 px-3 mb-0">
                                                        يتم عرض الشجرة بدايةً من الحساب الأب المحدد: <strong>@Model.SelectedParentAccountName</strong>.
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="alert alert-secondary py-2 px-3 mb-0">
                                                        لم يتم تحديد حساب أب من الإعدادات، لذلك يتم عرض جميع الحسابات من الجذر.
                                                    </div>
                                                }
                                            </div>
                                            @if (Model.ParentAccountTree.Any())
                                            {
                                                <div id="dashboardParentAccountsTree" class="tree-container">
                                                    @{
                                                        ViewData["SelectedCurrencyCode"] = Model.SelectedCurrencyCode;
                                                        ViewData["BaseCurrencyCode"] = Model.BaseCurrencyCode;
                                                        ViewData["CollapseTreeNodes"] = true;
                                                    }
                                                    @await Html.PartialAsync("_AccountBalanceTreeNode", Model.ParentAccountTree)
                                                    @{
                                                        ViewData["CollapseTreeNodes"] = null;
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="alert alert-info text-center mb-0">
                                                    لا توجد بيانات لعرضها
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }

                            @*        @if (canViewAccounts)
                            {
                                <div class="@accountTreeColumnClass">
                                    <div class="card account-tree-card shadow-sm border-0 h-100">
                                        <div class="card-header d-flex align-items-center justify-content-between">
                                            <div>
                                                <h5 class="card-title mb-0"><i class="fas fa-sitemap ms-2"></i> أرصدة الحسابات حسب النوع</h5>
                                                <span class="text-muted small">عرض هرمي لتوزيع الحسابات بالقيم المختارة</span>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            @if (Model.AccountTypeTrees.Any())
                                            {
                                                <div id="dashboardAccountTypeTree" class="tree-container"
                                                     data-branch-id="@(Model.SelectedBranchId?.ToString() ?? string.Empty)"
                                                     data-from-date="@Model.FromDate.ToString("yyyy-MM-dd")"
                                                     data-to-date="@Model.ToDate.ToString("yyyy-MM-dd")"
                                                     data-currency-id="@(Model.SelectedCurrencyId?.ToString() ?? string.Empty)"
                                                     data-selected-currency="@Model.SelectedCurrencyCode"
                                                     data-base-currency="@Model.BaseCurrencyCode">
                                                    @{
                                                        ViewData["SelectedCurrencyCode"] = Model.SelectedCurrencyCode;
                                                        ViewData["BaseCurrencyCode"] = Model.BaseCurrencyCode;
                                                    }
                                                    @await Html.PartialAsync("_AccountBalanceTreeNode", Model.AccountTypeTrees)
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="alert alert-info text-center mb-0">
                                                    لا توجد بيانات لعرضها
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            } *@
                        </section>
                    </div>
                }

                @if (canViewLinks)
                {
                    <div class="dashboard-widget" data-widget-id="quick-links" data-widget-name="الروابط السريعة" data-default-size="medium">
                        <div class="widget-controls" aria-hidden="true">
                            <button type="button" class="widget-control-btn widget-drag-handle" title="سحب لترتيب الودجت">
                                <i class="fas fa-grip-vertical"></i>
                            </button>
                            <div class="widget-resize-controls">
                                <button type="button" class="widget-control-btn widget-size-down" title="تصغير الودجت">
                                    <i class="fas fa-compress-alt"></i>
                                </button>
                                <button type="button" class="widget-control-btn widget-size-up" title="تكبير الودجت">
                                    <i class="fas fa-expand-alt"></i>
                                </button>
                            </div>
                            <button type="button" class="widget-control-btn widget-hide" title="إخفاء الودجت">
                                <i class="fas fa-eye-slash"></i>
                            </button>
                        </div>
                        <section class="card quick-links-card shadow-sm border-0 mb-0">
                            <div class="card-header">
                                <h5 class="card-title mb-0"><i class="fas fa-link ms-2"></i> الروابط السريعة</h5>
                                <span class="text-muted small">انتقل إلى أكثر الصفحات استخداماً في النظام</span>
                            </div>
                            <div class="card-body">
                                @if (hasQuickLinkTiles)
                                {
                                    <div class="quick-links-grid">
                                        @if (canAccessAccounts)
                                        {
                                            <a href="@Url.Action("Index", "Accounts")" class="quick-link-tile">
                                                <i class="fas fa-list-alt"></i>
                                                <span>إدارة الحسابات</span>
                                            </a>
                                            <a href="@Url.Action("Tree", "Accounts")" class="quick-link-tile">
                                                <i class="fas fa-sitemap"></i>
                                                <span>شجرة الحسابات</span>
                                            </a>
                                        }
                                        @if (canAccessJournal)
                                        {
                                            <a href="@Url.Action("Index", "JournalEntries")" class="quick-link-tile">
                                                <i class="fas fa-book"></i>
                                                <span>القيود المالية</span>
                                            </a>
                                        }
                                        @if (canAccessReports)
                                        {
                                            <a href="@Url.Action("Index", "Reports")" class="quick-link-tile">
                                                <i class="fas fa-chart-bar"></i>
                                                <span>التقارير المالية</span>
                                            </a>
                                        }
                                        @if (canAccessBranches)
                                        {
                                            <a href="@Url.Action("Index", "Branches")" class="quick-link-tile">
                                                <i class="fas fa-building"></i>
                                                <span>إدارة الفروع</span>
                                            </a>
                                        }
                                        @if (canAccessCostCenters)
                                        {
                                            <a href="@Url.Action("Index", "CostCenters")" class="quick-link-tile">
                                                <i class="fas fa-bullseye"></i>
                                                <span>مراكز التكلفة</span>
                                            </a>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-muted mb-0">لا توجد روابط متاحة بحسب صلاحياتك الحالية.</p>
                                }
                            </div>
                        </section>
                    </div>
                }
            </div>
        </div>
        <aside class="dashboard-side">
            <div class="card side-card shadow-sm border-0">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-info-circle ms-2"></i> ملخص الإعدادات</h6>
                </div>
                <div class="card-body">
                    <div class="summary-item">
                        <span class="summary-label">الفرع</span>
                        <span class="summary-value">@selectedBranchName</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">الفترة الزمنية</span>
                        <span class="summary-value">@dateRangeLabel</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">العملة المختارة</span>
                        <span class="summary-value">@Model.SelectedCurrencyCode</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">العملة الأساسية</span>
                        <span class="summary-value">@Model.BaseCurrencyCode</span>
                    </div>
                </div>
            </div>

            <div class="card side-card shadow-sm border-0">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-stream ms-2"></i> إجراءات سريعة</h6>
                </div>
                <div class="card-body">
                    <ul class="side-actions">
                        <li><a href="@Url.Action("Create", "ReceiptVouchers")"><i class="fas fa-file-invoice-dollar ms-1"></i> سند قبض</a></li>
                        <li><a href="@Url.Action("Create", "DisbursementVouchers")"><i class="fas fa-money-check-alt ms-1"></i> سند صرف</a></li>
                        <li><a href="@Url.Action("Create", "JournalEntries")"><i class="fas fa-pen-fancy ms-1"></i> قيد مالي</a></li>
                        <li><a href="@Url.Action("Create", "Assets")"><i class="fas fa-box-open ms-1"></i> أصل جديد</a></li>
                    </ul>
                </div>
            </div>

            @if (ViewBag.Currencies != null)
            {
                <div class="card side-card shadow-sm border-0">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fas fa-coins ms-2"></i> العملات المتاحة</h6>
                    </div>
                    <div class="card-body">
                        <div class="currency-badges">
                            @foreach (var currency in ViewBag.Currencies)
                            {
                                <span class="badge rounded-pill bg-light text-dark">@currency.Code</span>
                            }
                        </div>
                    </div>
                </div>
            }
        </aside>
    </div>
</div>

@section Styles {
    <style>
        .dashboard-wrapper {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .dashboard-toolbar .toolbar-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            background: linear-gradient(135deg, #6f42c1, #9c66ff);
            color: #fff;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 1.4rem;
        }

        .toolbar-chip {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 0.75rem 1rem;
            min-width: 160px;
            display: flex;
            flex-direction: column;
            gap: 0.35rem;
        }

            .toolbar-chip .chip-label {
                font-size: 0.75rem;
                color: #6c757d;
                text-transform: uppercase;
            }

            .toolbar-chip .chip-value {
                font-weight: 600;
                color: #212529;
            }

        .dashboard-layout {
            display: grid;
            grid-template-columns: minmax(0, 1fr) 340px;
            gap: 1.5rem;
        }

        .dashboard-customization-card {
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.08), rgba(16, 185, 129, 0.08));
        }

            .dashboard-customization-card .btn {
                display: inline-flex;
                align-items: center;
                gap: 0.35rem;
            }

        .dashboard-widgets-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 1.5rem;
        }

        .dashboard-widget {
            position: relative;
            display: flex;
            flex-direction: column;
            grid-column: span 1;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .dashboard-widget .card,
            .dashboard-widget section {
                width: 100%;
            }

            .dashboard-widget.size-small {
                grid-column: span 1;
            }

            .dashboard-widget.size-medium {
                grid-column: span 2;
            }

            .dashboard-widget.size-large {
                grid-column: span 3;
            }

            .dashboard-widget.size-full {
                grid-column: 1 / -1;
            }

            .dashboard-widget.is-hidden {
                display: none !important;
            }

        .dashboard-widgets-grid.is-editing .dashboard-widget {
            border-radius: 18px;
            border: 1px dashed rgba(79, 70, 229, 0.4);
            padding: 0.25rem;
            background-color: rgba(79, 70, 229, 0.04);
        }

        .widget-controls {
            position: absolute;
            top: 12px;
            inset-inline-start: 12px;
            left: 12px;
            display: flex;
            align-items: center;
            gap: 0.35rem;
            background: rgba(15, 23, 42, 0.75);
            color: #f8fafc;
            padding: 0.35rem 0.5rem;
            border-radius: 999px;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.2s ease;
            z-index: 5;
        }

        .dashboard-widgets-grid.is-editing .widget-controls {
            opacity: 1;
            pointer-events: auto;
        }

        .widget-control-btn {
            background: transparent;
            border: none;
            color: inherit;
            padding: 0.25rem;
            border-radius: 6px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 28px;
            min-height: 28px;
        }

            .widget-control-btn:hover,
            .widget-control-btn:focus {
                background: rgba(255, 255, 255, 0.15);
                color: #fff;
            }

        .widget-resize-controls {
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        .dashboard-widget.is-dragging {
            box-shadow: 0 20px 40px rgba(15, 23, 42, 0.15);
        }

            .dashboard-widget.is-dragging .card,
            .dashboard-widget.is-dragging section {
                pointer-events: none;
            }

        .widget-placeholder {
            border: 2px dashed rgba(79, 70, 229, 0.4);
            border-radius: 18px;
            min-height: 120px;
            background: rgba(79, 70, 229, 0.06);
        }

        .dashboard-side {
            display: flex;
            flex-direction: column;
            gap: 1.25rem;
        }

        .dashboard-search-card {
            background: linear-gradient(135deg, rgba(79, 70, 229, 0.08), rgba(16, 185, 129, 0.08));
        }

        .dashboard-search-header .search-chip {
            display: inline-block;
            padding: 0.35rem 0.75rem;
            background: rgba(79, 70, 229, 0.15);
            color: #4f46e5;
            border-radius: 999px;
            font-size: 0.8rem;
        }

        .dashboard-search-fields .form-label {
            font-weight: 600;
            color: #495057;
        }

        .search-field {
            position: relative;
        }

            .search-field > i {
                position: absolute;
                inset-inline-end: 1rem;
                inset-block-start: 50%;
                transform: translateY(-50%);
                color: #6c757d;
                pointer-events: none;
            }

            .search-field .form-select,
            .search-field .form-control {
                padding-inline-end: 2.75rem;
                border-radius: 12px;
            }

        .dashboard-search-suggestions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.25rem;
        }

        .suggestion-card {
            background: #fff;
            border-radius: 16px;
            padding: 1.2rem;
            box-shadow: 0 12px 30px rgba(15, 23, 42, 0.08);
        }

        .suggestion-title {
            font-weight: 700;
            margin-bottom: 0.75rem;
            color: #1f2937;
        }

        .suggestion-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 0.65rem;
        }

            .suggestion-list a {
                color: #0d6efd;
                text-decoration: none;
                font-weight: 500;
            }

                .suggestion-list a:hover {
                    text-decoration: underline;
                }

        .dashboard-stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 1rem;
        }

        .stat-card {
            position: relative;
            border-radius: 18px;
            padding: 1.5rem;
            color: #fff;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(15, 23, 42, 0.15);
            display: flex;
            gap: 1rem;
            align-items: center;
        }

            .stat-card .stat-icon {
                font-size: 2rem;
                opacity: 0.85;
            }

            .stat-card .stat-title {
                font-size: 0.9rem;
                letter-spacing: 0.5px;
                text-transform: uppercase;
                opacity: 0.85;
            }

            .stat-card .stat-value {
                font-size: 1.5rem;
                font-weight: 700;
                display: block;
            }

            .stat-card .stat-sub {
                font-size: 0.85rem;
                opacity: 0.75;
            }

            .stat-card small {
                font-weight: 500;
            }

        .gradient-primary {
            background: linear-gradient(135deg, #2563eb, #7c3aed);
        }

        .gradient-danger {
            background: linear-gradient(135deg, #ef4444, #f97316);
        }

        .gradient-secondary {
            background: linear-gradient(135deg, #6b7280, #4b5563);
        }

        .gradient-success {
            background: linear-gradient(135deg, #10b981, #22d3ee);
        }

        .gradient-warning {
            background: linear-gradient(135deg, #f59e0b, #f97316);
        }

        .gradient-info {
            background: linear-gradient(135deg, #14b8a6, #06b6d4);
        }

        .cashbox-card {
            border-radius: 18px;
            overflow: hidden;
        }

            .cashbox-card .card-body {
                background-color: #f8fafc;
                padding: 0;
                border-top: 1px solid #e2e8f0;
            }

        .cashbox-loading {
            padding: 1.5rem;
        }

        .cashbox-content {
            padding: 1.25rem 1.5rem;
            max-height: 420px;
            overflow-y: auto;
            overflow-x: hidden;
            background-color: #ffffff;
        }

            .cashbox-content .alert {
                margin-bottom: 0;
            }

        .cashbox-card .card-header,
        .account-tree-card .card-header,
        .quick-links-card .card-header,
        .side-card .card-header {
            background-color: transparent;
            border-bottom: none;
        }

            .cashbox-card .card-header h5,
            .account-tree-card .card-header h5,
            .quick-links-card .card-header h5 {
                font-weight: 700;
            }

        .quick-links-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 1rem;
        }

        .quick-link-tile {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.75rem;
            padding: 1.25rem;
            border-radius: 16px;
            background: #f8fafc;
            color: #1f2937;
            text-decoration: none;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .quick-link-tile i {
                font-size: 1.5rem;
                color: #2563eb;
            }

            .quick-link-tile:hover {
                transform: translateY(-4px);
                box-shadow: 0 14px 30px rgba(37, 99, 235, 0.2);
            }

        .side-card .summary-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px dashed #e2e8f0;
            gap: 1rem;
        }

            .side-card .summary-item:last-child {
                border-bottom: none;
            }

        .summary-label {
            font-weight: 600;
            color: #475569;
        }

        .summary-value {
            color: #111827;
            font-weight: 600;
        }

        .side-actions {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

            .side-actions a {
                color: #2563eb;
                text-decoration: none;
                font-weight: 500;
            }

                .side-actions a:hover {
                    text-decoration: underline;
                }

        .currency-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .tree-container {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .tree-node {
            margin: 5px 0;
            padding: 8px;
            border-radius: 5px;
        }

        .tree-node-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .tree-node-info {
            display: flex;
            align-items: center;
            flex-grow: 1;
        }

        .tree-children {
            margin-right: 25px;
            border-right: 2px solid #e9ecef;
            padding-right: 15px;
        }

        .account-code {
            font-weight: bold;
            color: #495057;
            margin-left: 10px;
        }

        .account-name {
            color: #212529;
            margin-left: 10px;
        }

        .toggle-btn {
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            padding: 0;
            margin-left: 5px;
            width: 20px;
            text-align: center;
        }

            .toggle-btn:hover {
                color: #495057;
            }

        .cashbox-card-toggle {
            min-width: 32px;
        }

        .cashbox-tree {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

            .cashbox-tree .tree-node {
                margin: 0;
                padding: 0;
                border-radius: 12px;
                border: 1px solid #e2e8f0;
                background-color: #ffffff;
                box-shadow: 0 10px 24px rgba(15, 23, 42, 0.05);
                overflow: hidden;
            }

            .cashbox-tree .tree-node-content {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                padding: 0.75rem 1rem;
                background-color: #f8fafc;
            }

            .cashbox-tree .tree-node-info {
                display: flex;
                align-items: center;
                flex-grow: 1;
                gap: 0.5rem;
            }

            .cashbox-tree .toggle-btn {
                background: none;
                border: none;
                color: #6c757d;
                cursor: pointer;
                width: 32px;
                height: 32px;
                border-radius: 50%;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s ease;
            }

                .cashbox-tree .toggle-btn:hover {
                    color: #0d6efd;
                    background-color: rgba(13, 110, 253, 0.1);
                }

            .cashbox-tree .tree-children {
                margin: 0 1.25rem 1.25rem 0;
                border-right: 2px solid #e2e8f0;
                padding: 0.75rem 1rem 0.75rem 0;
                background-color: #ffffff;
            }

                .cashbox-tree .tree-children .tree-node {
                    box-shadow: none;
                    border-radius: 10px;
                }

                .cashbox-tree .tree-children .tree-node-content {
                    background-color: transparent;
                }

            .cashbox-tree .account-code {
                font-weight: 600;
                color: #475569;
            }

            .cashbox-tree .account-name {
                color: #1f2937;
                font-weight: 500;
            }

        @@media (max-width: 1400px) {
            .dashboard-widget.size-large {
                grid-column: span 2;
            }
        }

        @@media (max-width: 992px) {
            .dashboard-widgets-grid {
                grid-template-columns: 1fr;
            }

            .dashboard-widget,
            .dashboard-widget.size-medium,
            .dashboard-widget.size-large,
            .dashboard-widget.size-full {
                grid-column: span 1 !important;
            }

            .widget-controls {
                top: 8px;
                inset-inline-start: 8px;
                left: 8px;
            }
        }

        @@media (max-width: 1200px) {
            .dashboard-layout {
                grid-template-columns: 1fr;
            }

            .dashboard-side {
                order: -1;
            }
        }

        @@media (max-width: 768px) {
            .dashboard-toolbar .card-body {
                flex-direction: column;
                align-items: flex-start;
            }

            .toolbar-chip {
                width: 100%;
            }

            .dashboard-search-fields .search-field > i {
                inset-inline-end: 0.75rem;
            }
        }

        @@media (max-width: 576px) {
            .cashbox-tree .tree-node-content {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .cashbox-tree .tree-node-info {
                flex-wrap: wrap;
                gap: 0.5rem;
            }

            .cashbox-tree .tree-node-content > .ms-auto {
                margin-inline-start: 0 !important;
                width: 100%;
                text-align: start;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        (function () {
            const STORAGE_KEY = 'accounting.dashboard.widgetLayout.v1';
            const grid = document.getElementById('dashboardWidgetsGrid');
            if (!grid) {
                return;
            }

            const toggleButton = document.getElementById('toggleCustomizeWidgets');
            const resetButton = document.getElementById('resetWidgetLayout');
            const addWidgetButton = document.getElementById('addWidgetButton');
            const hiddenWidgetList = document.getElementById('hiddenWidgetList');
            const stateLabel = toggleButton ? toggleButton.querySelector('.customize-state-label') : null;

            const sizeOrder = ['small', 'medium', 'large', 'full'];
            const initialWidgets = Array.from(grid.querySelectorAll('.dashboard-widget'));
            const availableIds = initialWidgets.map(widget => widget.dataset.widgetId).filter(Boolean);
            const availableSet = new Set(availableIds);

            const baseLayout = {
                order: availableIds.slice(),
                sizes: initialWidgets.reduce((acc, widget) => {
                    const widgetId = widget.dataset.widgetId;
                    const defaultSize = widget.dataset.defaultSize || 'medium';
                    if (widgetId) {
                        acc[widgetId] = defaultSize;
                    }
                    return acc;
                }, {}),
                hidden: []
            };

            function cloneLayout(layout) {
                return {
                    order: Array.isArray(layout.order) ? layout.order.slice() : [],
                    sizes: layout.sizes ? { ...layout.sizes } : {},
                    hidden: Array.isArray(layout.hidden) ? layout.hidden.slice() : []
                };
            }

            function normalizeLayout(layout) {
                const normalized = cloneLayout(layout);
                normalized.order = normalized.order.filter(id => availableSet.has(id));
                normalized.hidden = normalized.hidden.filter(id => availableSet.has(id));
                availableIds.forEach(id => {
                    if (!normalized.order.includes(id)) {
                        normalized.order.push(id);
                    }
                    if (!normalized.sizes[id]) {
                        normalized.sizes[id] = baseLayout.sizes[id] || 'medium';
                    }
                });
                return normalized;
            }

            const defaultLayout = normalizeLayout(baseLayout);
            let currentLayout = loadLayout();
            let isEditing = false;
            let sortableInstance = null;

            applyLayout(currentLayout);

            if (toggleButton) {
                toggleButton.addEventListener('click', function () {
                    setEditing(!isEditing);
                });
            }

            if (resetButton) {
                resetButton.addEventListener('click', function () {
                    if (!confirm('سيتم إعادة ضبط ترتيب وأحجام الودجات. هل تريد المتابعة؟')) {
                        return;
                    }
                    localStorage.removeItem(STORAGE_KEY);
                    currentLayout = cloneLayout(defaultLayout);
                    applyLayout(currentLayout);
                    setEditing(false);
                    saveLayout();
                });
            }

            if (hiddenWidgetList) {
                hiddenWidgetList.addEventListener('click', function (event) {
                    const target = event.target.closest('button[data-widget-id]');
                    if (!target) {
                        return;
                    }
                    event.preventDefault();
                    showWidget(target.dataset.widgetId);
                    if (window.bootstrap && addWidgetButton) {
                        const dropdownInstance = bootstrap.Dropdown.getInstance(addWidgetButton);
                        if (dropdownInstance) {
                            dropdownInstance.hide();
                        }
                    }
                });
            }

            grid.addEventListener('click', function (event) {
                const button = event.target.closest('.widget-control-btn');
                if (!button || !isEditing) {
                    return;
                }

                const widget = button.closest('.dashboard-widget');
                if (!widget) {
                    return;
                }
                const widgetId = widget.dataset.widgetId;
                if (!widgetId) {
                    return;
                }

                if (button.classList.contains('widget-hide')) {
                    event.preventDefault();
                    hideWidget(widgetId);
                } else if (button.classList.contains('widget-size-up')) {
                    event.preventDefault();
                    changeSize(widgetId, 1);
                } else if (button.classList.contains('widget-size-down')) {
                    event.preventDefault();
                    changeSize(widgetId, -1);
                }
            });

            function loadLayout() {
                try {
                    const stored = localStorage.getItem(STORAGE_KEY);
                    if (!stored) {
                        return cloneLayout(defaultLayout);
                    }
                    const parsed = JSON.parse(stored);
                    return normalizeLayout({
                        order: Array.isArray(parsed.order) ? parsed.order.slice() : [],
                        sizes: parsed.sizes && typeof parsed.sizes === 'object' ? { ...parsed.sizes } : {},
                        hidden: Array.isArray(parsed.hidden) ? parsed.hidden.slice() : []
                    });
                } catch (error) {
                    console.warn('Failed to parse dashboard layout from storage.', error);
                    return cloneLayout(defaultLayout);
                }
            }

            function saveLayout() {
                try {
                    localStorage.setItem(STORAGE_KEY, JSON.stringify(currentLayout));
                } catch (error) {
                    console.warn('Failed to persist dashboard layout.', error);
                }
            }

            function applyLayout(layout) {
                const order = layout.order.slice();
                order.forEach(id => {
                    const widget = grid.querySelector('[data-widget-id="' + id + '"]');
                    if (widget) {
                        grid.appendChild(widget);
                    }
                });

                initialWidgets.forEach(widget => {
                    const id = widget.dataset.widgetId;
                    if (!order.includes(id)) {
                        grid.appendChild(widget);
                    }
                    const targetSize = layout.sizes[id] || widget.dataset.defaultSize || 'medium';
                    setWidgetSize(widget, targetSize);
                    toggleHidden(widget, layout.hidden.includes(id));
                });

                refreshHiddenList();
            }

            function setWidgetSize(widget, size) {
                widget.classList.remove('size-small', 'size-medium', 'size-large', 'size-full');
                const nextSize = sizeOrder.includes(size) ? size : (widget.dataset.defaultSize || 'medium');
                widget.classList.add('size-' + nextSize);
                widget.dataset.size = nextSize;
            }

            function toggleHidden(widget, hidden) {
                widget.classList.toggle('is-hidden', hidden);
                widget.setAttribute('aria-hidden', hidden ? 'true' : 'false');
            }

            function hideWidget(widgetId) {
                const widget = grid.querySelector('[data-widget-id="' + widgetId + '"]');
                if (!widget) {
                    return;
                }
                if (!currentLayout.hidden.includes(widgetId)) {
                    currentLayout.hidden.push(widgetId);
                }
                toggleHidden(widget, true);
                saveLayout();
                refreshHiddenList();
            }

            function showWidget(widgetId) {
                const widget = grid.querySelector('[data-widget-id="' + widgetId + '"]');
                if (!widget) {
                    return;
                }
                currentLayout.hidden = currentLayout.hidden.filter(id => id !== widgetId);
                toggleHidden(widget, false);
                if (!currentLayout.order.includes(widgetId)) {
                    currentLayout.order.push(widgetId);
                }
                grid.appendChild(widget);
                saveLayout();
                refreshHiddenList();
            }

            function changeSize(widgetId, direction) {
                const widget = grid.querySelector('[data-widget-id="' + widgetId + '"]');
                if (!widget) {
                    return;
                }
                const currentSize = currentLayout.sizes[widgetId] || widget.dataset.size || widget.dataset.defaultSize || 'medium';
                let index = sizeOrder.indexOf(currentSize);
                if (index === -1) {
                    index = sizeOrder.indexOf(widget.dataset.defaultSize || 'medium');
                }
                const nextIndex = Math.min(sizeOrder.length - 1, Math.max(0, index + direction));
                const nextSize = sizeOrder[nextIndex];
                currentLayout.sizes[widgetId] = nextSize;
                setWidgetSize(widget, nextSize);
                saveLayout();
            }

            function refreshHiddenList() {
                if (!hiddenWidgetList) {
                    return;
                }
                hiddenWidgetList.innerHTML = '';
                const hiddenIds = currentLayout.hidden.filter(id => availableSet.has(id));
                if (!hiddenIds.length) {
                    const emptyItem = document.createElement('li');
                    emptyItem.className = 'dropdown-item text-muted small';
                    emptyItem.textContent = 'لا توجد ودجات مخفية';
                    hiddenWidgetList.appendChild(emptyItem);
                } else {
                    hiddenIds.forEach(id => {
                        const widget = grid.querySelector('[data-widget-id="' + id + '"]');
                        const name = widget && widget.dataset && widget.dataset.widgetName ? widget.dataset.widgetName : id;
                        const itemButton = document.createElement('button');
                        itemButton.type = 'button';
                        itemButton.className = 'dropdown-item';
                        itemButton.dataset.widgetId = id;
                        itemButton.textContent = 'إظهار ' + name;
                        hiddenWidgetList.appendChild(itemButton);
                    });
                }
                updateAddWidgetButtonState();
            }

            function updateAddWidgetButtonState() {
                if (!addWidgetButton) {
                    return;
                }
                const hasHidden = currentLayout.hidden.some(id => availableSet.has(id));
                const shouldDisable = !isEditing || !hasHidden;
                addWidgetButton.disabled = shouldDisable;
                if (shouldDisable) {
                    addWidgetButton.classList.add('disabled');
                    addWidgetButton.setAttribute('aria-disabled', 'true');
                } else {
                    addWidgetButton.classList.remove('disabled');
                    addWidgetButton.removeAttribute('aria-disabled');
                }
            }

            function setEditing(state) {
                isEditing = state;
                grid.classList.toggle('is-editing', isEditing);
                if (toggleButton) {
                    toggleButton.classList.toggle('active', isEditing);
                }
                if (stateLabel) {
                    stateLabel.textContent = isEditing ? 'إنهاء التخصيص' : 'بدء التخصيص';
                }
                updateAddWidgetButtonState();
                if (isEditing) {
                    enableSortable();
                } else {
                    disableSortable();
                }
            }

            function enableSortable() {
                if (typeof Sortable === 'undefined' || sortableInstance) {
                    return;
                }
                sortableInstance = Sortable.create(grid, {
                    animation: 200,
                    handle: '.widget-drag-handle',
                    draggable: '.dashboard-widget:not(.is-hidden)',
                    ghostClass: 'widget-placeholder',
                    dragClass: 'is-dragging',
                    onEnd: updateOrderFromDom
                });
            }

            function disableSortable() {
                if (sortableInstance) {
                    sortableInstance.destroy();
                    sortableInstance = null;
                }
            }

            function updateOrderFromDom() {
                const visibleOrder = Array.from(grid.querySelectorAll('.dashboard-widget'))
                    .filter(widget => !widget.classList.contains('is-hidden'))
                    .map(widget => widget.dataset.widgetId)
                    .filter(Boolean);
                const hiddenOrder = currentLayout.hidden.filter(id => !visibleOrder.includes(id));
                currentLayout.order = visibleOrder.concat(hiddenOrder);
                saveLayout();
            }

            setEditing(false);
        })();
    </script>
    <script>
        function applyFilters() {
            const branchId = document.getElementById('branchFilter').value;
            const fromDate = document.getElementById('fromDateFilter').value;
            const toDate = document.getElementById('toDateFilter').value;
            const currencyId = document.getElementById('currencyFilter').value;
            const url = new URL(window.location);
            if (branchId) {
                url.searchParams.set('branchId', branchId);
            } else {
                url.searchParams.delete('branchId');
            }
            if (fromDate) {
                url.searchParams.set('fromDate', fromDate);
            } else {
                url.searchParams.delete('fromDate');
            }
            if (toDate) {
                url.searchParams.set('toDate', toDate);
            } else {
                url.searchParams.delete('toDate');
            }
            if (currencyId) {
                url.searchParams.set('currencyId', currencyId);
            } else {
                url.searchParams.delete('currencyId');
            }
            window.location.href = url.toString();
        }

        $(function () {
            $('#resetFilters').on('click', function () {
                $('#branchFilter').val('');
                $('#fromDateFilter').val('');
                $('#toDateFilter').val('');
                $('#currencyFilter').val('');
                applyFilters();
            });

            $(document).on('click', '#cashBoxTree .toggle-btn', function () {
                var $button = $(this);
                var $node = $button.closest('.tree-node');
                var $children = $node.find('> .tree-children');

                if (!$children.length) {
                    return;
                }

                var isVisible = $children.is(':visible');
                if (isVisible) {
                    $children.slideUp(200);
                    $button.html('<i class="fas fa-plus"></i>');
                } else {
                    $children.slideDown(200);
                    $button.html('<i class="fas fa-minus"></i>');
                }
            });

            var $accountTypeTree = $('#dashboardAccountTypeTree');
            var loadTreeUrl = '@Url.Action("LoadAccountTreeNodes")';

            $(document).on('click', '#dashboardAccountTypeTree .toggle-btn', function () {
                var $button = $(this);
                var $node = $button.closest('.tree-node');
                var hasChildren = $node.data('has-children');

                if (!hasChildren) {
                    return;
                }

                var $children = $node.find('> .tree-children');
                var isVisible = $children.is(':visible');

                if (isVisible) {
                    $children.slideUp(200);
                    $button.html('<i class="fas fa-plus"></i>');
                    return;
                }

                if ($children.data('loaded')) {
                    $children.slideDown(200);
                    $button.html('<i class="fas fa-minus"></i>');
                    return;
                }

                var nodeId = parseInt($node.data('node-id')) || 0;
                var accountType = $node.data('account-type');
                var requestData = {};

                if (nodeId > 0) {
                    requestData.parentId = nodeId;
                }

                if (accountType) {
                    requestData.accountType = accountType;
                }

                var branchId = $accountTypeTree.data('branch-id');
                var fromDate = $accountTypeTree.data('from-date');
                var toDate = $accountTypeTree.data('to-date');
                var currencyId = $accountTypeTree.data('currency-id');

                if (branchId) {
                    requestData.branchId = branchId;
                }
                if (fromDate) {
                    requestData.fromDate = fromDate;
                }
                if (toDate) {
                    requestData.toDate = toDate;
                }
                if (currencyId) {
                    requestData.currencyId = currencyId;
                }

                $button.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i>');

                $.get(loadTreeUrl, requestData)
                    .done(function (html) {
                        var trimmed = $.trim(html);
                        if (trimmed.length) {
                            $children.html(trimmed);
                            $children.data('loaded', true);
                            $children.slideDown(200);
                            $button.html('<i class="fas fa-minus"></i>');
                        } else {
                            $children.data('loaded', true);
                            $node.data('has-children', false);
                            $button.replaceWith('<span style="width: 20px; display: inline-block;"></span>');
                        }
                    })
                    .fail(function () {
                        alert('تعذر تحميل بيانات الشجرة، يرجى المحاولة مرة أخرى.');
                        $button.html('<i class="fas fa-plus"></i>');
                    })
                    .always(function () {
                        $button.prop('disabled', false);
                    });
            });

            $(document).on('click', '#dashboardParentAccountsTree .toggle-btn', function () {
                var $button = $(this);
                var $node = $button.closest('.tree-node');
                var $children = $node.find('> .tree-children');

                if (!$children.length) {
                    return;
                }

                var isVisible = $children.is(':visible');
                if (isVisible) {
                    $children.slideUp(200);
                    $button.html('<i class="fas fa-plus"></i>');
                } else {
                    $children.slideDown(200);
                    $button.html('<i class="fas fa-minus"></i>');
                }
            });
        });
    </script>
}

